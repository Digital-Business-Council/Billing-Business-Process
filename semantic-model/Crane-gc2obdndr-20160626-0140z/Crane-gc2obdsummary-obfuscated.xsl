<?xml version="1.0" encoding="UTF-8"?>
<!--
Crane-gc2obdsummary-obfuscated.xsl

This is a stylesheet to generate the summary HTML reports of CCTS models.

Copyright (C) - Crane Softwrights Ltd. 
              - http://www.CraneSoftwrights.com/links/res-dev.htm

Portions copyright (C) - OASIS Open 2016. All Rights Reserved.
                       - http://www.oasis-open.org/who/intellectualproperty.php

Typical invocation:

  java -jar saxon9he.jar {arguments}

Mandatory invocation arguments (URIs are relative to input genericode file):

 - stylesheet file:                     -xsl:Crane-gc2obdsummary-obfuscated.xsl
 - input genericode file                -s:{filename}
 - placebo output in target directory   -o:{dir}/junk.out
 - title prefix at report top           title-prefix={string}

Optional invocation arguments (column names have no spaces):

 - time stamp for the package              date-time={string}
 - amalgam report base name                all-documents-base-name={string}
   - when there is more than one document, this is the filename to use for
     the report that combines the members of all documents
 - which profile to report on              subset-column-name={string-no-sp}
 - only minimum subset of all models       subset-result={no(default)/yes}
   - this prunes away items that are never used by any model
 - a particular subset of some models      subset-model-regex={string}
 - a particular subset of some constructs  subset-column-name={string-no-sp}
   - the string value of the column name must have all of the spaces removed
     from the column name in the spreadsheet used to create the genericode file
 - lazy pruning of the model               subset-absent-is-zero=(no(def)/yes)
   - this only applies to items that have a minimum cardinality of 0; to
     preserve the item the original cardinality must be included in the subset
 - document the exclusion of items         subset-exclusions=(yes(default)/no)
 - document only the entire "all" model    do-all-only=(no(default)/yes)
 - reorganize the report                   ABIE-sort-column-name={string-no-sp}

Optional invocation arguments for summaries of extensions (both of which
must exist):

 - genericode file for base vocabulary      base-uri={filename}
 - the summary report of the base model     base-summary-uri={string}
   - use this to link out of an extension summary into the base model summary
 
Necessary invocation argument when the common library has exactly one ABIE:

 - specify the model name          common-library-singleton-model-name={string}

Optional invocation argument to support parallel processing invocation:

 - specify the group number        parallel-group-of-4={1,2,3,4} (default:all)
   - create only one quarter of the results (the "all" document is in group 4)

THE AUTHOR MAKES NO REPRESENTATION ABOUT THE SUITABILITY OF THIS CODE FOR ANY
PURPOSE. THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR 
IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES 
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN 
NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED 
TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, 
EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

IMPLEMENTATION NOTE:

This stylesheet logic does not accommodate qualified object classes.

TECHNICAL NOTE:

This stylesheet has been purposely obfuscated and all comments have been
removed.  Please respect our copyright and do not attempt to reverse 
engineer the techniques involved.

Crane-gc2obdsummary.xsl $Id: Crane-gc2obdsummary.xsl,v 1.25 2016/06/26 01:40:09 admin Exp $
ndrSubset.xsl $Id: ndrSubset.xsl,v 1.35 2016/05/29 16:47:02 admin Exp $
Crane-commonndr.xsl $Id: Crane-commonndr.xsl,v 1.34 2016/05/07 16:53:52 admin Exp $
Crane-utilndr.xsl $Id: Crane-utilndr.xsl,v 1.9 2016/05/02 20:32:39 admin Exp $
-->
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:xs="http://www.CraneSoftwrights.com/ns/xslstyle" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:gu="urn:X-gc2obdndr" exclude-result-prefixes="xs gu xsd" version="2.0"><xsl:param name="subset-result" as="xsd:string" select="'no'"/><xsl:param name="subset-model-regex" as="xsd:string?"/><xsl:param name="subset-column-name" as="xsd:string?"/><xsl:param name="doc-column-names-regex" as="xsd:string?"/><xsl:param name="subset-absent-is-zero" as="xsd:string" select="'no'"/><xsl:param name="subset-exclusions" as="xsd:string" select="'yes'"/><xsl:param name="subset-include-type-elements" as="xsd:string" select="'yes'"/><xsl:param name="subset-include-ignored-types" as="xsd:string" select="'yes'"/><xsl:variable name="gu:I421664843" as="xsd:boolean" select="not(starts-with('no',lower-case($subset-absent-is-zero)))"/><xsl:variable name="gu:I210832421" as="xsd:boolean" select="starts-with('yes',lower-case($subset-exclusions))"/><xsl:variable name="gu:I140554947" as="xsd:boolean" select="starts-with('yes',lower-case($subset-include-type-elements))"/><xsl:variable name="gu:O105416210" as="xsd:boolean" select="starts-with('yes',lower-case($subset-include-ignored-types))"/><xsl:variable name="gu:O84332968" as="xsd:string?" select="translate(normalize-space($subset-column-name),' ','')"/><xsl:key name="gu:I70277473" match="Column" use="ShortName"/><xsl:variable name="gu:O60237834" as="xsd:string?" select="key('gu:I70277473',$gu:O84332968)/LongName"/><xsl:variable name="gu:I52708105" as="xsd:boolean" select="string($subset-column-name) or string($subset-model-regex) or not(starts-with('no',lower-case($subset-result)))"/><xsl:variable name="gu:I46851649" as="element(Column)*"><xsl:if test="exists($doc-column-names-regex)"><xsl:sequence select="$gu:O42166484/*/ColumnSet/Column [matches(ShortName,$doc-column-names-regex)]"/></xsl:if></xsl:variable><xsl:function name="gu:O35138736" as="xsd:boolean"><xsl:param name="gu:I38333167" as="element(Row)"/><xsl:sequence select="if( not( $gu:I52708105 ) ) then true() else ( some $gu:I32435757 in ($gu:I30118917,$gu:I28110989) satisfies $gu:I32435757 is $gu:I38333167 )"/></xsl:function><xsl:function name="gu:O24803814" as="xsd:boolean"><xsl:param name="gu:O26354052" as="element(Row)"/><xsl:sequence select="if( not( $gu:I52708105 ) ) then true() else if( gu:O23425824($gu:O26354052,'ComponentType')='ABIE' ) then gu:O35138736( $gu:O26354052 ) else if( not( gu:O35138736( $gu:O26354052/ preceding-sibling::Row[gu:O23425824(.,'ComponentType')='ABIE'][1] ) ) ) then false() else not( gu:O22192886($gu:O26354052) )"/></xsl:function><xsl:variable name="gu:O21083242" as="element(Row)*" select="$gu:O42166484/*/SimpleCodeList/Row"/><xsl:variable name="gu:O20079278" as="element(Row)*" select="($gu:I28110989,$gu:I30118917)/ key('gu:I19166583',gu:O23425824(.,'ObjectClass')) [not( gu:O22192886(.) )]"/><xsl:variable name="gu:O18333254" as="element(Row)*" select="$gu:O20079278[gu:O23425824(.,'ComponentType')='ASBIE']"/><xsl:variable name="gu:O17569368" as="element(Row)*" select="$gu:O20079278[gu:O23425824(.,'ComponentType')='BBIE']"/><xsl:variable name="gu:I16866593" as="element(Row)*" select="$gu:O18333254 [ for $gu:O16217878 in gu:O23425824(.,'AssociatedObjectClass') return ( not( key('gu:O15617216',$gu:O16217878) ) or ( every $gu:O15059458 in key('gu:I19166583',$gu:O16217878) satisfies gu:O22192886( $gu:O15059458 ) ) ) ]"/><xsl:variable name="gu:I14540167" as="element(Row)*"><xsl:sequence select="$gu:O21083242[gu:O23425824(.,'ComponentType')='ABIE'] [gu:O23425824(.,'ModelName')=$gu:O14055494]"/></xsl:variable><xsl:variable name="gu:I30118917" as="element(Row)*"><xsl:sequence select="if( $gu:I52708105 ) then gu:I13602091( $gu:I28110989 ) else $gu:O21083242[gu:O23425824(.,'ComponentType')='ABIE'] [gu:O23425824(.,'ModelName')=$gu:O14055494]"/></xsl:variable><xsl:function name="gu:I13602091" as="element(Row)*"><xsl:param name="gu:O13177026" as="element(Row)*"/><xsl:variable name="gu:O12777722" select="$gu:O13177026/ key('gu:I12401907',gu:O23425824(.,'ObjectClass'),$gu:O42166484) [not(gu:O22192886(.))]/gu:O23425824(.,'AssociatedObjectClass')"/><xsl:variable name="gu:O12047566" select="for $each in $gu:O12777722 return $gu:O42166484/key('gu:O15617216',$each,.)"/><xsl:sequence select="gu:O11712912( ($gu:O13177026,$gu:O12047566), ( for $gu:I11396347 in $gu:O42166484 return $gu:O12047566/key('gu:I12401907', gu:O23425824(.,'ObjectClass')) [not( gu:O22192886(.) )]/ key('gu:O15617216', gu:O23425824(.,'AssociatedObjectClass'),$gu:I11396347)))"/></xsl:function><xsl:function name="gu:O11712912" as="element(Row)*"><xsl:param name="gu:I11096443" as="element(Row)*"/><xsl:param name="gu:I10541621" as="element(Row)*"/><xsl:variable name="gu:O10284508" select="$gu:I10541621[1]"/><xsl:choose><xsl:when test="not($gu:O10284508)"><xsl:sequence select="$gu:I11096443"/></xsl:when><xsl:when test="some $gu:I10039639 in $gu:I11096443 satisfies $gu:I10039639 is $gu:O10284508"><xsl:sequence select="gu:O11712912($gu:I11096443, $gu:I10541621 except $gu:O10284508)"/></xsl:when><xsl:otherwise><xsl:sequence select="gu:O11712912( (:add this to the set found so far:) ( $gu:I11096443, $gu:O10284508 ), (:add its references to the ones being looked for:) ( $gu:I10541621, ($gu:O42166484,$gu:I9806159)/ key('gu:I12401907', gu:O23425824($gu:O10284508,'ObjectClass')) [not( gu:O22192886(.) )]/ key('gu:O15617216', gu:O23425824(.,'AssociatedObjectClass')) ) except ( $gu:I11096443, $gu:O10284508 ) )"/></xsl:otherwise></xsl:choose></xsl:function><xsl:template name="gu:I9583291"><xsl:choose><xsl:when test="not($gu:I52708105)"/><xsl:when test="string($subset-column-name) and ( every $gu:I9370329 in ($gu:O42166484,$gu:I9806159)/*/SimpleCodeList/Row/gu:O23425824(.,$subset-column-name) satisfies normalize-space($gu:I9370329)='' )"><xsl:text>No subset information found for named column: </xsl:text><xsl:value-of select="$subset-column-name"/><xsl:text>
</xsl:text></xsl:when><xsl:when test="string($subset-model-regex) and ( every $gu:I9166627 in distinct-values( ($gu:O42166484,$gu:I9806159)/*/SimpleCodeList/Row/gu:O23425824(.,'ModelName') ) satisfies not( matches($gu:I9166627,$subset-model-regex) ) )"><xsl:text>No subset information found for model regex: </xsl:text><xsl:value-of select="$subset-model-regex"/><xsl:text>
</xsl:text></xsl:when><xsl:otherwise><xsl:for-each select="$gu:I30118917"><xsl:variable name="gu:O8971592" select="key('gu:I19166583',gu:O23425824(.,'ObjectClass'))"/><xsl:choose><xsl:when test="count($gu:O8971592)=0"><xsl:text>The ABIE appears corrupted in that it has no </xsl:text><xsl:text>BIEs: </xsl:text><xsl:value-of select="gu:O23425824(.,'DictionaryEntryName')"/><xsl:text>
</xsl:text></xsl:when><xsl:when test="not( gu:O8784684(.) )"/><xsl:when test="not( some $gu:O15059458 in $gu:O8971592 satisfies not( gu:O22192886($gu:O15059458) ) )"><xsl:text>An ABIE cannot have all of its members excluded </xsl:text><xsl:text>in a subset: </xsl:text><xsl:value-of select="gu:O23425824(.,'DictionaryEntryName')"/><xsl:text>
</xsl:text></xsl:when></xsl:choose><xsl:for-each select="$gu:O8971592"><xsl:variable name="gu:O8605404" select="normalize-space(gu:O23425824(.,'Cardinality'))"/><xsl:variable name="gu:O8433296" select="normalize-space(gu:O23425824(.,$gu:O84332968))"/><xsl:choose><xsl:when test="not($gu:O8433296 = ('','0','0..1','1','0..n','1..n'))"><xsl:text>Invalid value "</xsl:text><xsl:value-of select="$gu:O8433296"/><xsl:text>" for subset cardinality: </xsl:text><xsl:value-of select="gu:O23425824(.,'DictionaryEntryName')"/><xsl:text>
</xsl:text></xsl:when><xsl:when test="not($gu:O8605404 = ('','0..1','1','0..n','1..n'))"><xsl:text>Invalid value "</xsl:text><xsl:value-of select="$gu:O8433296"/><xsl:text>" for original cardinality: </xsl:text><xsl:value-of select="gu:O23425824(.,'DictionaryEntryName')"/><xsl:text>
</xsl:text></xsl:when><xsl:when test="$gu:O8433296=''"/><xsl:when test="substring($gu:O8605404,1,1)='1' and not( substring($gu:O8433296,1,1)='1')"><xsl:text>The minimum cardinality cannot be lowered </xsl:text><xsl:text>from "</xsl:text><xsl:value-of select="$gu:O8605404"/><xsl:text>" to "</xsl:text><xsl:value-of select="$gu:O8433296"/><xsl:text>": </xsl:text><xsl:value-of select="gu:O23425824(.,'DictionaryEntryName')"/><xsl:text>
</xsl:text></xsl:when><xsl:when test="substring($gu:O8605404,string-length($gu:O8605404),1)='1' and substring($gu:O8433296,string-length($gu:O8433296),1)='n'"><xsl:text>The maximum cardinality cannot be raised </xsl:text><xsl:text>from "</xsl:text><xsl:value-of select="$gu:O8605404"/><xsl:text>" to "</xsl:text><xsl:value-of select="$gu:O8433296"/><xsl:text>": </xsl:text><xsl:value-of select="gu:O23425824(.,'DictionaryEntryName')"/><xsl:text>
</xsl:text></xsl:when></xsl:choose></xsl:for-each></xsl:for-each></xsl:otherwise></xsl:choose></xsl:template><xsl:function name="gu:O8784684" as="xsd:boolean"><xsl:param name="gu:O8267938" as="element(Row)"/><xsl:sequence select="exists( ($gu:O42166484/key('gu:I8108939',gu:O23425824($gu:O8267938,'ObjectClass')), $gu:I9806159/key('gu:I8108939',gu:O23425824($gu:O8267938,'ObjectClass'))) [gu:O24803814(.)] )"/></xsl:function><xsl:function name="gu:O7955940" as="xsd:boolean"><xsl:param name="gu:O8267938" as="element(Row)"/><xsl:sequence select="gu:O23425824($gu:O8267938,'ModelName')=$gu:O7808608"/></xsl:function><xsl:function name="gu:I7666633" as="xsd:string"><xsl:param name="row" as="element(Row)"/><xsl:param name="minimumFlag" as="xsd:boolean"/><xsl:for-each select="(normalize-space(gu:O23425824($row,$gu:O84332968)) [$gu:I52708105][string(.)], gu:O23425824($row,'Cardinality')[$gu:I421664843] [starts-with(normalize-space(.),'0')] [$gu:I52708105]/'0', normalize-space(gu:O23425824($row,'Cardinality')))[1]"><xsl:choose><xsl:when test="$minimumFlag"><xsl:value-of select="substring(.,1,1)"/></xsl:when><xsl:when test="ends-with(.,'n')">unbounded</xsl:when><xsl:otherwise><xsl:value-of select="substring(.,string-length(.),1)"/></xsl:otherwise></xsl:choose></xsl:for-each></xsl:function><xsl:function name="gu:I7529729" as="xsd:string"><xsl:param name="row" as="element(Row)"/><xsl:sequence select="gu:I7666633($row,true())"/></xsl:function><xsl:function name="gu:O7397628" as="xsd:string"><xsl:param name="row" as="element(Row)"/><xsl:sequence select="gu:I7666633($row,false())"/></xsl:function><xsl:function name="gu:O22192886" as="xsd:boolean"><xsl:param name="row" as="element(Row)"/><xsl:sequence select="gu:I7529729($row)='0' and gu:O7397628($row)='0'"/></xsl:function><xsl:key name="gu:I7270083" match="Row[gu:O23425824(.,'ComponentType')='ABIE']" use="if( gu:O23425824(.,'ModelName')=$gu:O14055494 ) then $gu:O14055494 else gu:O23425824(.,$gu:I7146861)"/><xsl:key name="gu:I7027747" match="Row" use="gu:O23425824(.,'DictionaryEntryName')"/><xsl:key name="gu:O6912538" match="Row[gu:O23425824(.,'ComponentType')='BBIE']" use="gu:O23425824(.,$gu:I7146861)"/><xsl:key name="gu:I6801045" match="Row[gu:O23425824(.,'ComponentType')='ABIE']" use="gu:O23425824(.,$gu:I7146861)"/><xsl:key name="gu:O15617216" match="Row[gu:O23425824(.,'ComponentType')='ABIE']" use="gu:O23425824(.,'ObjectClass')"/><xsl:key name="gu:O6693092" match="Row" use="gu:O23425824(.,'ComponentType')"/><xsl:key name="gu:I6588513" match="Row[gu:O23425824(.,'DataType')]" use="gu:O23425824(.,'DataType')"/><xsl:key name="gu:I6487151" match="Row[gu:O23425824(.,'ComponentType')!='ABIE']" use="preceding-sibling::Row[gu:O23425824(.,'ComponentType')='ABIE'][1]/ gu:O23425824(.,'ObjectClass')"/><xsl:key name="gu:I19166583" match="Row[gu:O23425824(.,'ComponentType')!='ABIE']" use="gu:O23425824(.,'ObjectClass')"/><xsl:key name="gu:I6388861" match="Row" use="concat( gu:O23425824(.,'ObjectClass'),' ', gu:O23425824(.,$gu:I7146861),' ', gu:O23425824(.,'ComponentType'))"/><xsl:key name="gu:I6293505" match="Row[gu:O23425824(.,'ComponentType')='ASBIE']" use="preceding-sibling::Row[gu:O23425824(.,'ComponentType')='ABIE'][1]/ gu:O23425824(.,$gu:I7146861)"/><xsl:key name="gu:I12401907" match="Row[gu:O23425824(.,'ComponentType')='ASBIE']" use="preceding-sibling::Row[gu:O23425824(.,'ComponentType')='ABIE'][1]/ gu:O23425824(.,'ObjectClass')"/><xsl:key name="gu:I8108939" match="Row[gu:O23425824(.,'ComponentType')='ASBIE']" use="gu:O23425824(.,'AssociatedObjectClass')"/><xsl:key name="gu:I6200953" match="Row[gu:O23425824(.,'ComponentType')='BBIE']" use="gu:O23425824(.,'DataType')"/><xsl:variable name="gu:O6111084" as="element(SimpleValue)*"><xsl:for-each-group select="/*/SimpleCodeList/Row/gu:O23425824(.,'ModelName')" group-by="."><xsl:sequence select="."/></xsl:for-each-group></xsl:variable><xsl:variable name="gu:I6023783" as="element(SimpleValue)*" select="$gu:I14540167/gu:O23425824(.,$gu:I7146861)"/><xsl:variable name="gu:I5938941" as="element(SimpleValue)*" select="$gu:I30118917/gu:O23425824(.,$gu:I7146861)"/><xsl:variable name="udt" as="element()*"><div><a name="UDT"/><h3>Unqualified data types</h3><table frame="border" rules="all" summary="Unqualified data types" class="uT"><tr><th valign="top">Dictionary Entry Name</th><th valign="top">Base type<br/>(XSD)</th><th valign="top">Supplementary component<br/>(attribute)</th><th valign="top">Cardi-<br/>nality</th><th valign="top">Type<br/>(XSD)</th><th valign="top">Definition</th></tr><tr><td valign="top" rowspan="3"><a name="UDT-Amount.Type">Amount. Type</a></td><td valign="top" rowspan="3">xsd:decimal</td><td valign="top" colspan="4">A number of monetary units specified using a given unit of currency.</td></tr><tr valign="top"><td><b>currencyID</b></td><td>required</td><td>xsd:normalizedString</td><td>The currency of the amount.</td></tr><tr valign="top"><td>currencyCodeListVersionID</td><td>optional</td><td>xsd:normalizedString</td><td>The VersionID of the UN/ECE Rec9 code list.</td></tr><tr><td valign="top" rowspan="7"><a name="UDT-BinaryObject.Type">Binary Object. Type</a></td><td valign="top" rowspan="7">xsd:base64Binary</td><td valign="top" colspan="4">A set of finite-length sequences of binary octets.</td></tr><tr valign="top"><td><b>mimeCode</b></td><td>required</td><td>xsd:normalizedString</td><td>The mime type of the binary object.</td></tr><tr valign="top"><td>characterSetCode</td><td>optional</td><td>xsd:normalizedString</td><td>The character set of the binary object if the mime type is text.</td></tr><tr valign="top"><td>encodingCode</td><td>optional</td><td>xsd:normalizedString</td><td>Specifies the decoding algorithm of the binary object.</td></tr><tr valign="top"><td>filename</td><td>optional</td><td>xsd:string</td><td>The filename of the binary object.</td></tr><tr valign="top"><td>format</td><td>optional</td><td>xsd:string</td><td>The format of the binary content.</td></tr><tr valign="top"><td>uri</td><td>optional</td><td>xsd:anyURI</td><td>The Uniform Resource Identifier that identifies where the binary object is located.</td></tr><tr><td valign="top" rowspan="7"><a name="UDT-Graphic.Type">Graphic. Type</a></td><td valign="top" rowspan="7">xsd:base64Binary</td><td valign="top" colspan="4">A diagram, graph, mathematical curve, or similar representation.</td></tr><tr valign="top"><td><b>mimeCode</b></td><td>required</td><td>xsd:normalizedString</td><td>The mime type of the graphic object.</td></tr><tr valign="top"><td>characterSetCode</td><td>optional</td><td>xsd:normalizedString</td><td>The character set of the binary object if the mime type is text.</td></tr><tr valign="top"><td>encodingCode</td><td>optional</td><td>xsd:normalizedString</td><td>Specifies the decoding algorithm of the binary object.</td></tr><tr valign="top"><td>filename</td><td>optional</td><td>xsd:string</td><td>The filename of the binary object.</td></tr><tr valign="top"><td>format</td><td>optional</td><td>xsd:string</td><td>The format of the binary content.</td></tr><tr valign="top"><td>uri</td><td>optional</td><td>xsd:anyURI</td><td>The Uniform Resource Identifier that identifies where the binary object is located.</td></tr><tr><td valign="top" rowspan="7"><a name="UDT-Picture.Type">Picture. Type</a></td><td valign="top" rowspan="7">xsd:base64Binary</td><td valign="top" colspan="4">A diagram, graph, mathematical curve, or similar representation.</td></tr><tr valign="top"><td><b>mimeCode</b></td><td>required</td><td>xsd:normalizedString</td><td>The mime type of the picture object.</td></tr><tr valign="top"><td>characterSetCode</td><td>optional</td><td>xsd:normalizedString</td><td>The character set of the binary object if the mime type is text.</td></tr><tr valign="top"><td>encodingCode</td><td>optional</td><td>xsd:normalizedString</td><td>Specifies the decoding algorithm of the binary object.</td></tr><tr valign="top"><td>filename</td><td>optional</td><td>xsd:string</td><td>The filename of the binary object.</td></tr><tr valign="top"><td>format</td><td>optional</td><td>xsd:string</td><td>The format of the binary content.</td></tr><tr valign="top"><td>uri</td><td>optional</td><td>xsd:anyURI</td><td>The Uniform Resource Identifier that identifies where the binary object is located.</td></tr><tr><td valign="top" rowspan="7"><a name="UDT-Sound.Type">Sound. Type</a></td><td valign="top" rowspan="7">xsd:base64Binary</td><td valign="top" colspan="4">An audio representation.</td></tr><tr valign="top"><td><b>mimeCode</b></td><td>required</td><td>xsd:normalizedString</td><td>The mime type of the sound object.</td></tr><tr valign="top"><td>characterSetCode</td><td>optional</td><td>xsd:normalizedString</td><td>The character set of the binary object if the mime type is text.</td></tr><tr valign="top"><td>encodingCode</td><td>optional</td><td>xsd:normalizedString</td><td>Specifies the decoding algorithm of the binary object.</td></tr><tr valign="top"><td>filename</td><td>optional</td><td>xsd:string</td><td>The filename of the binary object.</td></tr><tr valign="top"><td>format</td><td>optional</td><td>xsd:string</td><td>The format of the binary content.</td></tr><tr valign="top"><td>uri</td><td>optional</td><td>xsd:anyURI</td><td>The Uniform Resource Identifier that identifies where the binary object is located.</td></tr><tr><td valign="top" rowspan="7"><a name="UDT-Video.Type">Video. Type</a></td><td valign="top" rowspan="7">xsd:base64Binary</td><td valign="top" colspan="4">A video representation.</td></tr><tr valign="top"><td><b>mimeCode</b></td><td>required</td><td>xsd:normalizedString</td><td>The mime type of the video object.</td></tr><tr valign="top"><td>characterSetCode</td><td>optional</td><td>xsd:normalizedString</td><td>The character set of the binary object if the mime type is text.</td></tr><tr valign="top"><td>encodingCode</td><td>optional</td><td>xsd:normalizedString</td><td>Specifies the decoding algorithm of the binary object.</td></tr><tr valign="top"><td>filename</td><td>optional</td><td>xsd:string</td><td>The filename of the binary object.</td></tr><tr valign="top"><td>format</td><td>optional</td><td>xsd:string</td><td>The format of the binary content.</td></tr><tr valign="top"><td>uri</td><td>optional</td><td>xsd:anyURI</td><td>The Uniform Resource Identifier that identifies where the binary object is located.</td></tr><tr><td valign="top" rowspan="10"><a name="UDT-Code.Type">Code. Type</a></td><td valign="top" rowspan="10">xsd:normalizedString</td><td valign="top" colspan="4">A character string (letters, figures, or symbols) that for brevity and/or language independence may be used to represent or replace a definitive value or text of an attribute, together with relevant supplementary information.</td></tr><tr valign="top"><td>languageID</td><td>optional</td><td>xsd:language</td><td>The identifier of the language used in the code name.</td></tr><tr valign="top"><td>listAgencyID</td><td>optional</td><td>xsd:normalizedString</td><td>An agency that maintains one or more lists of codes.</td></tr><tr valign="top"><td>listAgencyName</td><td>optional</td><td>xsd:string</td><td>The name of the agency that maintains the list of codes.</td></tr><tr valign="top"><td>listID</td><td>optional</td><td>xsd:normalizedString</td><td>The identification of a list of codes.</td></tr><tr valign="top"><td>listName</td><td>optional</td><td>xsd:string</td><td>The name of a list of codes.</td></tr><tr valign="top"><td>listSchemeURI</td><td>optional</td><td>xsd:anyURI</td><td>The Uniform Resource Identifier that identifies where the code list scheme is located.</td></tr><tr valign="top"><td>listURI</td><td>optional</td><td>xsd:anyURI</td><td>The Uniform Resource Identifier that identifies where the code list is located.</td></tr><tr valign="top"><td>listVersionID</td><td>optional</td><td>xsd:normalizedString</td><td>The version of the list of codes.</td></tr><tr valign="top"><td>name</td><td>optional</td><td>xsd:string</td><td>The textual equivalent of the code content component.</td></tr><tr><td valign="top" rowspan="1"><a name="UDT-DateTime.Type">Date Time. Type</a></td><td valign="top" rowspan="1">xsd:dateTime</td><td valign="top" colspan="4">A particular point in the progression of time, together with relevant supplementary information.</td></tr><tr><td valign="top" rowspan="1"><a name="UDT-Date.Type">Date. Type</a></td><td valign="top" rowspan="1">xsd:date</td><td valign="top" colspan="4">One calendar day according the Gregorian calendar.</td></tr><tr><td valign="top" rowspan="1"><a name="UDT-Time.Type">Time. Type</a></td><td valign="top" rowspan="1">xsd:time</td><td valign="top" colspan="4">An instance of time that occurs every day.</td></tr><tr><td valign="top" rowspan="8"><a name="UDT-Identifier.Type">Identifier. Type</a></td><td valign="top" rowspan="8">xsd:normalizedString</td><td valign="top" colspan="4">A character string to identify and uniquely distinguish one instance of an object in an identification scheme from all other objects in the same scheme, together with relevant supplementary information.</td></tr><tr valign="top"><td>schemeAgencyID</td><td>optional</td><td>xsd:normalizedString</td><td>The identification of the agency that maintains the identification scheme.</td></tr><tr valign="top"><td>schemeAgencyName</td><td>optional</td><td>xsd:string</td><td>The name of the agency that maintains the identification scheme.</td></tr><tr valign="top"><td>schemeDataURI</td><td>optional</td><td>xsd:anyURI</td><td>The Uniform Resource Identifier that identifies where the identification scheme data is located.</td></tr><tr valign="top"><td>schemeID</td><td>optional</td><td>xsd:normalizedString</td><td>The identification of the identification scheme.</td></tr><tr valign="top"><td>schemeName</td><td>optional</td><td>xsd:string</td><td>The name of the identification scheme.</td></tr><tr valign="top"><td>schemeURI</td><td>optional</td><td>xsd:anyURI</td><td>The Uniform Resource Identifier that identifies where the identification scheme is located.</td></tr><tr valign="top"><td>schemeVersionID</td><td>optional</td><td>xsd:normalizedString</td><td>The version of the identification scheme.</td></tr><tr><td valign="top" rowspan="1"><a name="UDT-Indicator.Type">Indicator. Type</a></td><td valign="top" rowspan="1">xsd:boolean</td><td valign="top" colspan="4">A list of two mutually exclusive Boolean values that express the only possible states of a property.</td></tr><tr><td valign="top" rowspan="3"><a name="UDT-Measure.Type">Measure. Type</a></td><td valign="top" rowspan="3">xsd:decimal</td><td valign="top" colspan="4">A numeric value determined by measuring an object using a specified unit of measure.</td></tr><tr valign="top"><td><b>unitCode</b></td><td>required</td><td>xsd:normalizedString</td><td>The type of unit of measure.</td></tr><tr valign="top"><td>unitCodeListVersionID</td><td>optional</td><td>xsd:normalizedString</td><td>The version of the measure unit code list.</td></tr><tr><td valign="top" rowspan="2"><a name="UDT-Numeric.Type">Numeric. Type</a></td><td valign="top" rowspan="2">xsd:decimal</td><td valign="top" colspan="4">Numeric information that is assigned or is determined by calculation, counting, or sequencing. It does not require a unit of quantity or unit of measure.</td></tr><tr valign="top"><td>format</td><td>optional</td><td>xsd:string</td><td>Whether the number is an integer, decimal, real number or percentage.</td></tr><tr><td valign="top" rowspan="2"><a name="UDT-Value.Type">Value. Type</a></td><td valign="top" rowspan="2">xsd:decimal</td><td valign="top" colspan="4">Numeric information that is assigned or is determined by calculation, counting, or sequencing. It does not require a unit of quantity or unit of measure.</td></tr><tr valign="top"><td>format</td><td>optional</td><td>xsd:string</td><td>Whether the number is an integer, decimal, real number or percentage.</td></tr><tr><td valign="top" rowspan="2"><a name="UDT-Percent.Type">Percent. Type</a></td><td valign="top" rowspan="2">xsd:decimal</td><td valign="top" colspan="4">Numeric information that is assigned or is determined by calculation, counting, or sequencing and is expressed as a percentage. It does not require a unit of quantity or unit of measure.</td></tr><tr valign="top"><td>format</td><td>optional</td><td>xsd:string</td><td>Whether the number is an integer, decimal, real number or percentage.</td></tr><tr><td valign="top" rowspan="2"><a name="UDT-Rate.Type">Rate. Type</a></td><td valign="top" rowspan="2">xsd:decimal</td><td valign="top" colspan="4">A numeric expression of a rate that is assigned or is determined by calculation, counting, or sequencing. It does not require a unit of quantity or unit of measure.</td></tr><tr valign="top"><td>format</td><td>optional</td><td>xsd:string</td><td>Whether the number is an integer, decimal, real number or percentage.</td></tr><tr><td valign="top" rowspan="5"><a name="UDT-Quantity.Type">Quantity. Type</a></td><td valign="top" rowspan="5">xsd:decimal</td><td valign="top" colspan="4">A counted number of non-monetary units, possibly including a fractional part.</td></tr><tr valign="top"><td>unitCode</td><td>optional</td><td>xsd:normalizedString</td><td>The unit of the quantity</td></tr><tr valign="top"><td>unitCodeListAgencyID</td><td>optional</td><td>xsd:normalizedString</td><td>The identification of the agency that maintains the quantity unit code list</td></tr><tr valign="top"><td>unitCodeListAgencyName</td><td>optional</td><td>xsd:string</td><td>The name of the agency which maintains the quantity unit code list.</td></tr><tr valign="top"><td>unitCodeListID</td><td>optional</td><td>xsd:normalizedString</td><td>The quantity unit code list.</td></tr><tr><td valign="top" rowspan="3"><a name="UDT-Text.Type">Text. Type</a></td><td valign="top" rowspan="3">xsd:string</td><td valign="top" colspan="4">A character string (i.e. a finite set of characters), generally in the form of words of a language.</td></tr><tr valign="top"><td>languageID</td><td>optional</td><td>xsd:language</td><td>The identifier of the language used in the content component.</td></tr><tr valign="top"><td>languageLocaleID</td><td>optional</td><td>xsd:normalizedString</td><td>The identification of the locale of the language.</td></tr><tr><td valign="top" rowspan="3"><a name="UDT-Name.Type">Name. Type</a></td><td valign="top" rowspan="3">xsd:string</td><td valign="top" colspan="4">A character string that constitutes the distinctive designation of a person, place, thing or concept.</td></tr><tr valign="top"><td>languageID</td><td>optional</td><td>xsd:language</td><td>The identifier of the language used in the content component.</td></tr><tr valign="top"><td>languageLocaleID</td><td>optional</td><td>xsd:normalizedString</td><td>The identification of the locale of the language.</td></tr></table></div></xsl:variable><xsl:param name="common-library-singleton-model-name" as="xsd:string?" select="()"/><xsl:variable name="gu:O42166484" as="document-node()" select="/"/><xsl:param name="base-uri" as="xsd:anyURI?" select="()"/><xsl:variable xmlns:gc="http://docs.oasis-open.org/codelist/ns/genericode/1.0/" name="gu:I9806159" as="document-node()?" select="if( $base-uri ) then for $u in resolve-uri( $base-uri, document-uri(/) ) return if( doc-available($u) ) then doc($u)[gc:CodeList] else () else ()"/><xsl:variable name="gu:I7146861" as="xsd:string+" select="('UBLName','ComponentName','Name')"/><xsl:variable name="gu:O14055494" as="xsd:string?"><xsl:variable name="gu:O5856456" as="element(model)+"><xsl:for-each-group select="$gu:O42166484/*/*/Row/gu:O23425824(.,'ModelName')" group-by="."><model name="{.}" count-bies="{count($gu:O42166484/*/*/Row[gu:O23425824(.,'ModelName')=current()])}" count-abies="{count($gu:O42166484/*/*/Row[gu:O23425824(.,'ModelName')=current()]                                         [gu:O23425824(.,'ComponentType')='ABIE'])}"/></xsl:for-each-group></xsl:variable><xsl:if test="count($gu:O5856456[@count-abies&gt;1])&gt;1"><xsl:message terminate="yes"><xsl:text>Only one model can have more than one ABIE as the </xsl:text><xsl:text>library model.</xsl:text></xsl:message></xsl:if><xsl:if test="count($gu:O5856456[@count-abies&gt;1])=0 and not($common-library-singleton-model-name)"><xsl:message terminate="yes"><xsl:text>When all models have only one ABIE then the model </xsl:text><xsl:text>to be considered the library model has to be </xsl:text><xsl:text>identified using the </xsl:text><xsl:text>"common-library-singleton-model-name" invocation </xsl:text><xsl:text>argument.</xsl:text></xsl:message></xsl:if><xsl:sequence select="if( $common-library-singleton-model-name ) then $common-library-singleton-model-name else gu:O5776230($gu:O42166484)"/></xsl:variable><xsl:function name="gu:O5776230" as="xsd:string?"><xsl:param name="gc" as="document-node()?"/><xsl:variable name="gu:I5698173" as="xsd:string*"><xsl:for-each-group group-by="gu:O23425824(.,'ModelName')" select="$gc/*/SimpleCodeList/Row[gu:O23425824(.,'ComponentType')='ABIE']"><xsl:if test="count(current-group())&gt;1"><xsl:value-of select="current-grouping-key()"/></xsl:if></xsl:for-each-group></xsl:variable><xsl:if test="count($gu:I5698173) &gt; 1"><xsl:message terminate="yes"><xsl:text>More than one common library model identified in </xsl:text><xsl:value-of select="document-uri($gc)"/><xsl:text> in that there are </xsl:text><xsl:value-of select="count($gu:I5698173)"/><xsl:text> models with more than one ABIE: </xsl:text><xsl:value-of select="$gu:I5698173" separator=","/></xsl:message></xsl:if><xsl:sequence select="if( empty($gu:I5698173) ) then if( $gc is $gu:I9806159 ) then () else gu:O5776230($gu:I9806159) else $gu:I5698173"/></xsl:function><xsl:function name="gu:O23425824" as="element(SimpleValue)?"><xsl:param name="row" as="element(Row)"/><xsl:param name="col" as="xsd:string*"/><xsl:variable name="gu:I5622197" as="element(SimpleValue)*" select="$row/Value[@ColumnRef=$col]/SimpleValue"/><xsl:if test="count($gu:I5622197) &gt; 1"><xsl:message terminate="yes"><xsl:text>Data error: multiple genericode values in a single </xsl:text><xsl:text>row for column reference</xsl:text><xsl:if test="count($col)&gt;1">s</xsl:if>: <xsl:text/><xsl:value-of select="$col" separator=","/> at <xsl:text/><xsl:for-each select="$row/ancestor-or-self::*"><xsl:text/>/<xsl:value-of select="name(.)"/><xsl:if test="self::Row">[<xsl:number/>]</xsl:if></xsl:for-each></xsl:message></xsl:if><xsl:sequence select="$gu:I5622197"/></xsl:function><xsl:function name="gu:I5548221" as="xsd:string?"><xsl:param name="item" as="item()?"/><xsl:sequence select="translate(normalize-space($item),' ','')"/></xsl:function><xsl:function name="gu:O5476166" as="xsd:string?"><xsl:param name="row" as="element(Row)"/><xsl:param name="col" as="xsd:string+"/><xsl:sequence select="gu:I5548221(gu:O23425824($row,$col))"/></xsl:function><xsl:param name="base-config-uri" select="()" as="xsd:anyURI?"/><xsl:param name="config" as="document-node()?" select="if( not($config-uri) ) then () else doc(resolve-uri($config-uri,base-uri(/)))"/><xsl:param name="config-uri" as="xsd:string?"/><xsl:variable name="gu:I5405959" as="document-node()?" select="$config"/><xsl:variable name="gu:I5337529" as="element()*"><xsl:variable name="gu:O5270810" select="$gu:I5405959/*/schema//(file | files)"/><xsl:if test="$gu:I5405959/*/schema"><xsl:variable name="gu:O5205738"><xsl:if test="count( ( $gu:O5270810[@type='DABIE'][1], $gu:O5270810[@type='XABIE'][1], $gu:O5270810[@type='AABIE'][1] ) ) != 1 or $gu:O5270810[not(@type=('DABIE','CABIE','CBBIE','QDT','UDT','EXT', 'XABIE','AABIE','SABIE','SBBIE','CVA'))]"><xsl:text>Files can be created only for one type of output, </xsl:text><xsl:text>either UBL documents (DABIE), extensions (XABIE) or </xsl:text><xsl:text>additional non-UBL documents (AABIE).
</xsl:text></xsl:if><xsl:if test="$gu:O5270810[@type=('SABIE','SBBIE')] and not($gu:O5270810[@type=('XABIE','AABIE')])"><xsl:text>Supplementary common library schemas can only be </xsl:text><xsl:text>created for extensions or additional documents.
</xsl:text></xsl:if><xsl:if test="$gu:O5270810[@type=('CABIE','CBBIE')] and $gu:O5270810[@type=('XABIE','AABIE')]"><xsl:text>Common library schemas can only be created when not </xsl:text><xsl:text>creating extensions or additional documents. </xsl:text><xsl:text>Reference common library schemas used in a common </xsl:text><xsl:text>library configuration.
</xsl:text></xsl:if><xsl:if test="count($gu:O5270810[@type='CVA'])&gt;1"><xsl:text>Can create only a single CVA file at a time.
</xsl:text></xsl:if><xsl:for-each select="$gu:O5270810[self::files and @prefix]"><xsl:text>A prefix cannot be specified when creating multiple </xsl:text><xsl:text>files.</xsl:text><xsl:value-of select="gu:O5142254(.)"/><xsl:text>
</xsl:text></xsl:for-each><xsl:if test="not($gu:O5270810)"><xsl:text>Some files must be specified for schema generation
</xsl:text></xsl:if></xsl:variable><xsl:if test="normalize-space($gu:O5205738)"><xsl:message terminate="yes" select="$gu:O5205738"/></xsl:if><xsl:sequence select="$gu:O5270810"/></xsl:if></xsl:variable><xsl:variable name="gu:I5080299" as="document-node()?" select="if( $base-config-uri ) then for $u in resolve-uri( $base-config-uri, document-uri(/) ) return if( doc-available($u) ) then doc($u) else () else ()"/><xsl:variable name="gu:I5019819" as="document-node()"><xsl:document><combination><xsl:for-each select="$gu:I5405959,$gu:I5080299"><xsl:for-each select="*"><xsl:copy><xsl:copy-of select="@*"/><xsl:attribute name="xml:base" select="base-uri(.)"/><xsl:copy-of select="node()"/></xsl:copy></xsl:for-each></xsl:for-each></combination></xsl:document></xsl:variable><xsl:key name="gu:O5270810" match="file|files" use="@type"/><xsl:variable name="gu:O4960762" as="xsd:string?" select="gu:O5776230($gu:I9806159)"/><xsl:variable name="gu:I4903079" as="element(Row)*"><xsl:variable name="gu:O4846722" select="(key('gu:O5270810','XABIE',$gu:I5019819), key('gu:O5270810','AABIE',$gu:I5019819))/@abie"/><xsl:choose><xsl:when test="$gu:O4846722"><xsl:sequence select="$gu:O4846722/ key('gu:I6801045',.,$gu:O42166484) [if( not( $subset-model-regex ) ) then true() else matches(gu:O23425824(.,'ModelName'),$subset-model-regex)]"/></xsl:when><xsl:otherwise><xsl:for-each-group select="/*/SimpleCodeList/ Row[gu:O23425824(.,'ModelName')!=$gu:O14055494] [gu:O23425824(.,'ComponentType')='ABIE'] [ if( not( $subset-model-regex ) ) then true() else matches(gu:O23425824(.,'ModelName'),$subset-model-regex)]" group-by="gu:O23425824(.,$gu:I7146861)"><xsl:sequence select="."/></xsl:for-each-group></xsl:otherwise></xsl:choose></xsl:variable><xsl:variable name="gu:I4791645" as="element(SimpleValue)*" select="$gu:I4903079/gu:O23425824(.,$gu:I7146861)"/><xsl:variable name="gu:I28110989" as="element(Row)*" select="$gu:I4903079 [ if( not( $subset-model-regex ) ) then true() else matches(gu:O23425824(.,'ModelName'),$subset-model-regex) ]"/><xsl:variable name="gu:O7808608" as="element(SimpleValue)*" select="$gu:I28110989/gu:O23425824(.,'ModelName')"/><xsl:variable name="gu:I4737807" as="element(SimpleValue)*" select="$gu:I28110989/gu:O23425824(.,'ObjectClass')"/><xsl:variable name="gu:O4685164" as="xsd:string" select="concat(key('gu:O5270810','CBBIE',$gu:I5019819)/@prefix,':')"/><xsl:variable name="gu:I4633679" as="xsd:string" select="concat(key('gu:O5270810','CABIE',$gu:I5019819)/@prefix,':')"/><xsl:variable name="gu:I4583313" as="xsd:string" select="concat(key('gu:O5270810','SBBIE',$gu:I5019819)/@prefix,':')"/><xsl:variable name="gu:O4534030" as="xsd:string" select="concat(key('gu:O5270810','SABIE',$gu:I5019819)/@prefix,':')"/><xsl:function name="gu:O4485796" as="xsd:string"><xsl:param name="name" as="xsd:string"/><xsl:param name="string" as="xsd:string"/><xsl:value-of><xsl:analyze-string select="$string" regex="%(.)"><xsl:matching-substring><xsl:value-of select="if(regex-group(1)='%') then '%' else if(regex-group(1)='f') then $name else if(regex-group(1)='n') then replace($name,'.*/','') else if(regex-group(1)='t') then format-dateTime( current-dateTime(), '[Y0001]-[M01]-[D01] [H01]:[m01][Z]' ) else if(regex-group(1)='z') then format-dateTime( adjust-dateTime-to-timezone(current-dateTime(),xsd:dayTimeDuration('PT0H')), '[Y0001]-[M01]-[D01] [H01]:[m01]z' ) else ."/></xsl:matching-substring><xsl:non-matching-substring><xsl:value-of select="."/></xsl:non-matching-substring></xsl:analyze-string></xsl:value-of></xsl:function><xsl:function name="gu:O5142254" as="xsd:string"><xsl:param name="this" as="element()"/><xsl:value-of><xsl:for-each select="$this/ancestor-or-self::*"><xsl:text/>/<xsl:value-of select="name(.)"/><xsl:if test="parent::*">[<xsl:number/>]</xsl:if></xsl:for-each><xsl:text>: </xsl:text><xsl:for-each select="$this"><xsl:text/>&lt;<xsl:value-of select="name(.)"/><xsl:for-each select="@*"><xsl:value-of select="concat(' ',name(.),'=&#34;',.,'&#34;')"/></xsl:for-each><xsl:text>&gt;</xsl:text></xsl:for-each></xsl:value-of></xsl:function><xsl:param name="title-prefix" as="xsd:string" required="yes"/><xsl:param name="all-documents-base-name" select="'AllDocuments'"/><xsl:param name="do-all-only" select="'no'"/><xsl:variable name="gu:I4438577" as="xsd:boolean" select="starts-with('yes',lower-case($do-all-only))"/><xsl:param name="base-summary-uri" as="xsd:string?"/><xsl:param name="ABIE-sort-column-name" as="xsd:string?"/><xsl:param name="gu:O4392342" as="xsd:string?" select="translate(normalize-space($ABIE-sort-column-name),' ','')"/><xsl:param name="date-time" as="xsd:string" select="format-dateTime( adjust-dateTime-to-timezone(current-dateTime(), xsd:dayTimeDuration('PT0H')), '[Y0001]-[M01]-[D01] [H01]:[m01]z')"/><xsl:param name="parallel-group-of-4" as="xsd:string" select="'0'"/><xsl:variable name="gu:O4347060" as="xsd:integer" select="if( $parallel-group-of-4 castable as xsd:integer ) then for $gu:O4302702 in ( $parallel-group-of-4 cast as xsd:integer ) return if( not( $gu:O4302702=(1,2,3,4) ) ) then 0 else $gu:O4302702 else 0"/><xsl:output indent="yes" method="html"/><xsl:template match="/"><xsl:if test="exists($base-summary-uri) != exists($gu:I9806159)"><xsl:message terminate="yes"><xsl:choose><xsl:when test="empty($base-summary-uri)"><xsl:text>The base uri for the summary report must be </xsl:text><xsl:text>specified when specifying the genericode file.</xsl:text></xsl:when><xsl:when test="empty($base-uri)"><xsl:text>The base uri for the genericode file must be </xsl:text><xsl:text>specified when specifying the summary file.</xsl:text></xsl:when><xsl:otherwise><xsl:text>The given base uri for the genericode file does </xsl:text><xsl:text>not resolve to an genericdode file.</xsl:text></xsl:otherwise></xsl:choose></xsl:message></xsl:if><xsl:if test="( count($gu:I28110989)&gt;1 or $gu:I4438577 ) and $gu:O4347060=(0,4)"><xsl:call-template name="gu:O4259240"/></xsl:if><xsl:for-each select="$gu:I28110989[not($gu:I4438577)] [$gu:O4347060 = (0, (( (position()-1) idiv ((last()+3) idiv 4 )) + 1))]"><xsl:call-template name="gu:O4259240"><xsl:with-param name="gu:O4216648" select="."/></xsl:call-template></xsl:for-each></xsl:template><xsl:template name="gu:O4259240"><xsl:param name="gu:O4216648" as="element(Row)?"/><xsl:variable name="gu:I4174899" as="element(SimpleValue)*" select="if( $gu:O4216648 ) then $gu:O4216648/gu:O23425824(.,'ModelName') else $gu:O7808608"/><xsl:variable name="gu:I4133969" select="if( $gu:O4216648 ) then gu:I13602091($gu:O4216648) else $gu:I30118917"/><xsl:variable name="gu:I4093833" select="( if( $gu:O4216648 ) then $gu:O4216648 else $gu:I28110989 ) | $gu:I4133969"/><xsl:variable name="gu:I4054469" select="($gu:I4133969 | $gu:I4093833)/ (., key('gu:I19166583',gu:O23425824(.,'ObjectClass')) [gu:O24803814(.)])"/><xsl:variable name="gu:I4015855" as="xsd:string" select="( $gu:O4216648/gu:O23425824(.,'ModelName'), $all-documents-base-name )[1]"/><xsl:message select="concat( if( $gu:O4347060 = 0 ) then '' else concat( '[',$gu:O4347060,'] ' ), 'Creating ',$gu:I4015855,'.html',' ...')"/><xsl:variable name="gu:O3977970" select="$title-prefix,'-',$gu:I4015855,'-',$date-time"/><xsl:result-document href="{concat($gu:I4015855,'.html')}"><html><head><title><xsl:value-of select="$gu:O3977970"/></title><style type="text/css">
.iT, .iR, .iC
{
  font-size:small;border:1px solid black; border-collapse:collapse;
  vertical-align:top;
}
.sC
{
  vertical-align:baseline;
}
.uT
{
  font-size:small;
}
        </style></head><body><h2><xsl:value-of select="$gu:O3977970"/></h2><xsl:call-template name="gu:O3940792"/><p><xsl:text>Index for all items: </xsl:text><xsl:for-each-group select="$gu:I4054469" group-by="upper-case(substring(gu:O23425824(.,$gu:I7146861),1,3))"><xsl:sort select="upper-case(substring(gu:O23425824(.,$gu:I7146861),1,3))" lang="en"/><a href="#Index_{current-grouping-key()}"><xsl:value-of select="current-grouping-key()"/></a><xsl:text> </xsl:text></xsl:for-each-group><xsl:for-each select="$gu:I4174899/../../gu:O23425824(.,'ModelName'), $gu:O14055494"><xsl:sort select=".=$gu:O14055494"/><xsl:sort select="."/><a href="#Table_{.}"><xsl:value-of select="."/></a><xsl:text> </xsl:text></xsl:for-each><a href="#UDT">Unqualified Data Types</a><xsl:text> </xsl:text><a href="#Summary">Summary</a></p><xsl:call-template name="gu:O3904304"/><hr/><xsl:for-each-group select="$gu:I4054469" group-by="gu:O23425824(.,'ModelName')"><xsl:sort select="gu:O23425824(.,'ModelName')=$gu:O14055494"/><xsl:sort select="gu:O23425824(.,'ModelName')"/><xsl:variable name="gu:O3868484" select="gu:O23425824(.,'ModelName')"/><h3><a name="Table_{$gu:O3868484}"><xsl:value-of select="$gu:O3868484"/></a></h3><xsl:if test="position()=last()"><small>
  This summary of elements only includes those members of the common
  library that are referenced directly or indirectly by
  <xsl:for-each select="distinct-values($gu:I4093833 [gu:O23425824(.,'ModelName')!=$gu:O14055494]/ gu:O23425824(.,'ModelName'))"><xsl:choose><xsl:when test="last()=1"/><xsl:when test="position()=last()"> and </xsl:when><xsl:when test="position()&gt;1">, </xsl:when></xsl:choose><xsl:value-of select="."/></xsl:for-each><xsl:text>.</xsl:text></small></xsl:if><xsl:variable name="gu:O3833316" select="false()"/><xsl:variable name="gu:O21083242" select="(current-group() | current-group()/key('gu:I19166583',gu:O23425824(.,'ObjectClass'))) [$gu:I210832421 or gu:O24803814(.)]"/><xsl:variable name="gu:O3798782"><xsl:for-each select="$gu:O3764864/row"><row><xsl:for-each select="h"><xsl:if test="( $gu:O3833316 or @force='yes' or $gu:O21083242[gu:O23425824(.,current()/ (if (n=('*pos','*name')) then $gu:I7146861 else n)) /normalize-space(.)] )"><xsl:copy-of select="."/></xsl:if></xsl:for-each></row></xsl:for-each></xsl:variable><table class="iT" summary="Module summary"><xsl:variable name="gu:I3731547"><tr class="iR"><xsl:for-each select="$gu:O3798782/row/h"><xsl:if test="not(@span='all')"><th class="iC"><xsl:copy-of select="t/node()"/></th></xsl:if></xsl:for-each></tr></xsl:variable><xsl:variable name="gu:O3698814" select="count($gu:I3731547/tr/th) - count($gu:O3798782/row[1]/h[not(@span='all')])"/><xsl:copy-of select="$gu:I3731547"/><xsl:for-each-group select="$gu:O21083242" group-by="gu:O23425824(.,'ObjectClass')"><xsl:sort select="if( $gu:O4392342 ) then (gu:O23425824(.,$gu:O4392342),gu:O23425824(.,'ObjectClass'))[1] else false()"/><xsl:sort select="if( $gu:O4392342 ) then () else gu:O23425824(.,'ObjectClassQualifier')"/><xsl:for-each select="current-group()"><xsl:variable name="gu:I10039639" select="."/><xsl:variable name="gu:O3666650" select="gu:O23425824($gu:I10039639,'ComponentType')"/><xsl:variable name="gu:I3635041" select="gu:O24803814(.)"/><xsl:variable name="gu:I3603973" select="count(preceding-sibling::Row[gu:O23425824(.,'ModelName')=$gu:O3868484]) + 2"/><xsl:variable name="gu:O3573430" select="gu:O23425824($gu:I10039639,'Cardinality')"/><xsl:variable name="gu:O3543402" select="if ( $gu:O3666650='ABIE') then '#f898c8' else if( $gu:O3666650='ASBIE') then '#cbfbcb' else '#ffffff'"/><xsl:variable name="gu:I3513873" select=".[$gu:O3666650='ABIE']/ key('gu:I8108939', gu:O23425824($gu:I10039639,'ObjectClass'),$gu:O42166484) [some $gu:O15059458 in $gu:I4054469 satisfies $gu:O15059458 is .]"/><xsl:if test="gu:O24803814(.) or $gu:I210832421"><xsl:for-each select="$gu:O3798782[$gu:I210832421 or $gu:I3635041]/row"><tr style="background-color:{$gu:O3543402};{           if(not($gu:I3635041)) then 'text-decoration:line-through;' else ''}" class="iR"><xsl:for-each select="h"><td class="iC"><xsl:if test="@span='all'"><xsl:attribute name="colspan" select="$gu:O3698814"/></xsl:if><xsl:choose><xsl:when test="n='*pos'"><xsl:attribute name="rowspan" select="2"/><a name="Table_{gu:O5476166($gu:I10039639,'DictionaryEntryName')}"/><a name="t-{$gu:O3868484}-{$gu:I3603973}"><xsl:if test="$gu:I3635041"><xsl:attribute name="href" select="concat('#d-',$gu:O3868484,'-',$gu:I3603973)"/></xsl:if><xsl:value-of select="$gu:I3603973"/></a><xsl:if test="$gu:O3666650!='ABIE'"><br/><a href="#Table_{gu:O5476166($gu:I10039639,'ObjectClass')}.Details">^</a></xsl:if></xsl:when><xsl:when test="n='*name'"><xsl:attribute name="rowspan" select="2"/><xsl:if test="starts-with($gu:O3573430,'1')"><xsl:attribute name="style"><xsl:text>font-weight:bold</xsl:text></xsl:attribute></xsl:if><xsl:if test="$gu:O4392342 and gu:O23425824($gu:I10039639,'ComponentType')='ABIE' and gu:O5476166($gu:I10039639,$gu:O4392342)!= gu:O23425824($gu:I10039639,$gu:I7146861)"><i><xsl:value-of select="concat( '(',gu:O23425824($gu:I10039639,$gu:O4392342),')')"/></i><br/></xsl:if><xsl:value-of select="gu:O23425824($gu:I10039639,$gu:I7146861)"/><xsl:if test="$gu:O3666650='ABIE'"><br/><xsl:for-each select="$gu:I3513873"><a href="#Table_{gu:O5476166(.,'DictionaryEntryName')}" title="{gu:O23425824(.,'DictionaryEntryName')}">&lt;</a><xsl:text> </xsl:text></xsl:for-each></xsl:if></xsl:when><xsl:when test="n[$gu:O3666650='BBIE']= ('RepresentationTerm','DataType')"><xsl:choose><xsl:when test="gu:O24803814($gu:I10039639)"><a href="#{concat('UDT-',gu:O5476166($gu:I10039639,'RepresentationTerm'),'.Type')}"><xsl:value-of select="gu:O23425824($gu:I10039639,n)"/></a></xsl:when><xsl:otherwise><xsl:value-of select="gu:O23425824($gu:I10039639,n)"/></xsl:otherwise></xsl:choose></xsl:when><xsl:when test="n[$gu:O3666650='ASBIE']= ('RepresentationTerm','AssociatedObjectClass')"><xsl:choose><xsl:when test="gu:O24803814($gu:I10039639)"><a href="{concat( if( $gu:I9806159/key('gu:O15617216',                                               gu:O23425824($gu:I10039639,current()/n),. ) )                                   then $base-summary-uri else '',                           '#Table_',gu:O5476166($gu:I10039639,n),'.Details')}"><xsl:value-of select="gu:O23425824($gu:I10039639,n)"/></a></xsl:when><xsl:otherwise><xsl:value-of select="gu:O23425824($gu:I10039639,n)"/></xsl:otherwise></xsl:choose></xsl:when><xsl:when test="n[$gu:O3666650!='ABIE']='ObjectClass'"><a href="#{concat('Table_',gu:O5476166($gu:I10039639,n),'.Details')}"><xsl:value-of select="gu:O23425824($gu:I10039639,n)"/></a></xsl:when><xsl:otherwise><xsl:value-of select="gu:O23425824($gu:I10039639,n)"/></xsl:otherwise></xsl:choose></td></xsl:for-each></tr></xsl:for-each></xsl:if></xsl:for-each></xsl:for-each-group></table></xsl:for-each-group><xsl:apply-templates mode="gu:I3484833" select="$udt"><xsl:with-param name="gu:I3456269" tunnel="yes" select="$gu:I4054469[gu:O23425824(.,'ComponentType')='BBIE']"/></xsl:apply-templates><h3><a name="Summary">Summary</a></h3><xsl:call-template name="gu:O3904304"/><xsl:for-each-group select="$gu:I4054469" group-by="upper-case(substring(gu:O23425824(.,$gu:I7146861),1,3))"><xsl:sort select="current-grouping-key()" lang="en"/><xsl:variable name="gu:O3868484" select="gu:O23425824(.,'ModelName')"/><xsl:variable name="gu:I3603973" select="count(preceding-sibling::Row[gu:O23425824(.,'ModelName')=$gu:O3868484]) + 2"/><h4><xsl:value-of select="current-grouping-key()"/></h4><a name="Index_{current-grouping-key()}"/><xsl:for-each-group select="current-group()" group-by="gu:O23425824(.,$gu:I7146861)"><xsl:sort select="current-grouping-key()" lang="en"/><a name="Summary_{gu:O23425824(.,$gu:I7146861)}"/><xsl:choose><xsl:when test="count(current-group())=1"><table summary="{current-grouping-key()} - single model"><tr><td class="sC" nowrap="nowrap"><a name="{concat('d-',$gu:O3868484,'-',$gu:I3603973)}"/><xsl:value-of select="current-grouping-key()"/><span class="uT"><xsl:text> (</xsl:text><xsl:call-template name="gu:I3428169"/><xsl:text>)</xsl:text></span></td><xsl:call-template name="gu:O3400522"><xsl:with-param name="gu:I4054469" select="$gu:I4054469"/></xsl:call-template></tr></table></xsl:when><xsl:otherwise><table summary="{current-grouping-key()} - multiple models"><tr><td class="sC" nowrap="nowrap"><xsl:value-of select="current-grouping-key()"/></td></tr></table><table summary="indentation"><tr><td><p>    </p></td><td valign="top"><xsl:variable name="gu:O3373318" select="current-grouping-key()"/><xsl:for-each-group select="current-group()" group-by="gu:O23425824(.,'ModelName')"><xsl:sort select="current-grouping-key()" lang="en"/><xsl:choose><xsl:when test="count(current-group())=1"><table summary="{current-grouping-key()} - single use in given model"><tr><td class="sC" nowrap="nowrap"><i><xsl:value-of select="current-grouping-key()"/></i><span class="ut"><xsl:text> (</xsl:text><xsl:for-each select="current-group()"><xsl:call-template name="gu:I3428169"/></xsl:for-each><xsl:text>)</xsl:text></span></td><xsl:call-template name="gu:O3400522"><xsl:with-param name="gu:I4054469" select="$gu:I4054469"/></xsl:call-template></tr></table></xsl:when><xsl:otherwise><table summary="{current-grouping-key()} - multiple use in given model "><tr><td style="vertical-align:baseline" nowrap="nowrap"><i><xsl:value-of select="current-grouping-key()"/></i></td></tr></table><table summary="indentation"><tr><td><p>    </p></td><td valign="top"><xsl:for-each select="current-group()[gu:O23425824(.,'ComponentType')='BBIE'], current-group()[gu:O23425824(.,'ComponentType')='ABIE'], current-group()[gu:O23425824(.,'ComponentType')='ASBIE']"><table summary="{$gu:O3373318} - each in given model"><tr><td class="sC uT" nowrap="nowrap"><xsl:text>(</xsl:text><xsl:call-template name="gu:I3428169"/><xsl:text>)</xsl:text></td><xsl:call-template name="gu:O3400522"><xsl:with-param name="gu:I4054469" select="$gu:I4054469"/></xsl:call-template></tr></table></xsl:for-each></td></tr></table></xsl:otherwise></xsl:choose></xsl:for-each-group></td></tr></table></xsl:otherwise></xsl:choose></xsl:for-each-group></xsl:for-each-group><pre><xsl:for-each select="1 to 5"><xsl:text>
</xsl:text></xsl:for-each></pre><small>END</small><pre><xsl:for-each select="1 to 80"><xsl:text>
</xsl:text></xsl:for-each></pre></body></html></xsl:result-document></xsl:template><xsl:template match="a[starts-with(@name,'UDT-')]" mode="gu:I3484833"><xsl:param name="gu:I3456269" tunnel="yes" as="element(Row)*"/><xsl:copy-of select="."/><br/><xsl:variable name="gu:O3346546" select="replace(@name,'(UDT-)(.+?)\.(.+)','$2')"/><xsl:for-each select="$gu:I3456269[gu:O23425824(.,'RepresentationTerm')= $gu:O3346546]"><xsl:sort select="gu:O23425824(.,'DictionaryEntryName')"/><a href="#Table_{gu:O5476166(.,'DictionaryEntryName')}" title="{gu:O23425824(.,'DictionaryEntryName')}">&lt;</a><xsl:text> </xsl:text></xsl:for-each></xsl:template><xsl:template match="node()" mode="gu:I3484833"><xsl:copy><xsl:copy-of select="@*"/><xsl:apply-templates mode="gu:I3484833"/></xsl:copy></xsl:template><xsl:template name="gu:I3428169"><xsl:param name="gu:I3320195" select="true()" as="xsd:boolean"/><xsl:param name="gu:O3294256" select="false()" as="xsd:boolean"/><xsl:variable name="gu:I3268719" select="gu:O23425824(.,'ModelName')"/><xsl:variable name="gu:I3243575" select="count(preceding-sibling::Row[gu:O23425824(.,'ModelName')=$gu:I3268719]) + 2"/><a><xsl:if test="$gu:I3320195"><xsl:attribute name="name" select="concat('d-',$gu:I3268719,'-',$gu:I3243575)"/></xsl:if><xsl:attribute name="href" select="concat('#t-',$gu:I3268719,'-',$gu:I3243575)"/><xsl:value-of select="$gu:I3243575"/></a><xsl:variable name="gu:I3218815" select="gu:O5476166(.,'ObjectClass')"/><xsl:if test="( $gu:O3294256 or $gu:I3218815!=$gu:I3268719 or gu:O23425824(.,'CraneCellObjectClassQualifier') ) and $gu:I3218815!=gu:O23425824(.,$gu:I7146861)"><xsl:text> </xsl:text><a href="{concat( if( $gu:I9806159/key('gu:O15617216',                                                 $gu:I3218815,. ) )                                   then $base-summary-uri else '',                           '#Summary_',$gu:I3218815)}"><xsl:for-each select="gu:O23425824(.,'ObjectClassQualifier')"><xsl:value-of select="concat(.,'_ ')"/></xsl:for-each><xsl:value-of select="$gu:I3218815"/></a></xsl:if></xsl:template><xsl:template name="gu:O3400522"><xsl:param name="gu:I4054469" as="element(Row)*"/><xsl:variable name="gu:O3666650" select="gu:O23425824(.,'ComponentType')"/><xsl:variable name="gu:O3170412" select="gu:O23425824(.,'AssociatedObjectClass')"/><xsl:variable name="gu:O3146752" select="gu:O5476166(.,'AssociatedObjectClass')"/><xsl:variable name="gu:I3123443" select="gu:O23425824(.,$gu:I7146861)"/><td style="vertical-align:baseline"><xsl:choose><xsl:when test="$gu:O3666650='ASBIE' and $gu:O3146752!=$gu:I3123443"><small><a href="{concat( if( $gu:I9806159/key('gu:O15617216',                                                 $gu:O3170412,. ) )                                   then $base-summary-uri else '',                           '#Summary_',$gu:O3146752)}"><xsl:value-of select="$gu:O3666650"/><xsl:text/> (<xsl:value-of select="$gu:O3146752"/>)<xsl:text/></a></small></xsl:when><xsl:otherwise><small><xsl:value-of select="$gu:O3666650"/></small></xsl:otherwise></xsl:choose></td><td style="vertical-align:baseline"><small><xsl:value-of select="gu:O23425824(.,'Definition')"/></small><xsl:if test="$gu:O3666650='ABIE'"><xsl:variable name="gu:O16217878" select="gu:O23425824(.,'ObjectClass')"/><xsl:variable name="gu:O3100476" select="key('gu:I8108939',$gu:O16217878) [some $gu:O15059458 in $gu:I4054469 satisfies $gu:O15059458 is .] [gu:O23425824(.,$gu:I7146861)!=$gu:I3123443]"/><xsl:if test="exists($gu:O3100476)"><small><br/><xsl:for-each select="$gu:O3100476"><xsl:sort select="gu:O23425824(.,$gu:I7146861)" lang="en"/><xsl:variable name="gu:I3077845" select="."/><xsl:variable name="gu:I3123443" select="gu:O23425824(.,$gu:I7146861)"/><xsl:if test="position()&gt;1"><xsl:text> </xsl:text></xsl:if><span style="white-space:nowrap"><a href="{concat( if( $gu:I9806159/key('gu:O15617216',                                     gu:O5476166($gu:I3077845,'ObjectClass'),. ) )                                   then $base-summary-uri else '',                           '#Summary_',gu:O5476166($gu:I3077845,'ObjectClass'))}"><xsl:value-of select="$gu:I3123443"/></a><xsl:text>(</xsl:text><xsl:call-template name="gu:I3428169"><xsl:with-param name="gu:I3320195" select="false()"/><xsl:with-param name="gu:O3294256" select="true()"/></xsl:call-template><xsl:text>)</xsl:text></span></xsl:for-each></small></xsl:if></xsl:if></td></xsl:template><xsl:template name="gu:O3940792"><xsl:comment><xsl:call-template name="gu:O3904304"/></xsl:comment></xsl:template><xsl:template name="gu:O3904304"><p><small>
   Rendering by 
   <a target="_blank" href="http://www.CraneSoftwrights.com/links/res-dev.htm">
     Crane Softwrights Ltd.: 
     <samp>http://www.CraneSoftwrights.com/links/res-dev.htm</samp></a>.
 </small><br/><small>
     Portions copyright © OASIS Open <xsl:text/><xsl:value-of select="format-date(current-date(),'[Y0000]')"/><xsl:text>. All Rights Reserved. </xsl:text><a target="_blank" href="http://www.oasis-open.org/policies-guidelines/ipr"><samp>http://www.oasis-open.org/policies-guidelines/ipr</samp></a></small></p><p>
   Rendering: <xsl:value-of select="$date-time"/></p><table summary="Legends"><tr><td rowspan="4" valign="top">Legends:</td><td>Summary Legend:</td><td valign="top">Name (<i>Model </i><small><u>line</u> Object</small>)
   <small>TYPE Description</small></td></tr><tr><td rowspan="2" valign="top">Table Legend:</td><td valign="top"><span style="color:blue;text-decoration:underline">^</span><span> = up-link to the containing ABIE of the BBIE 
or the ASBIE (hover to see ABIE name)</span></td></tr><tr><td valign="top"><span style="color:blue;text-decoration:underline">&lt;</span><span> = back-link to the ASBIE using the ABIE, or 
to the BBIE using the data type (hover to see destination)</span></td></tr><tr><td valign="top"> Line number links: </td><td valign="top"><span>alternate between summary view and table view</span></td></tr></table><br/></xsl:template><xsl:variable name="gu:O3764864" as="document-node()"><xsl:document><row><h><n>*pos</n></h><h><n>*name</n><t>Name</t></h><h span="all"><n>Definition</n><t>Definition</t></h></row><row><xsl:for-each select="$gu:O60237834"><h force="yes"><n><xsl:value-of select="$gu:O84332968"/></n><t><xsl:value-of select="replace(.,'([a-z])([A-Z])','$1​$2')"/></t></h></xsl:for-each><xsl:for-each select="$gu:I46851649"><h force="yes"><n><xsl:value-of select="ShortName"/></n><t><xsl:value-of select="replace(LongName,'([a-z])([A-Z])','$1​$2')"/></t></h></xsl:for-each><h><n>Cardinality</n><t>Card.</t></h><h><n>RepresentationTerm</n><t>Rep. Term</t></h><h><n>AlternativeBusinessTerms</n><t>Alt. Business<br/>Terms</t></h><h><n>Examples</n><t>Examples</t></h><h><n>DictionaryEntryName</n><t>Dictionary Entry Name</t></h><h><n>UNTDEDCode</n><t>UNTDED<br/>Code</t></h><h><n>CurrentVersion</n><t>Ver.</t></h><h><n>ComponentType</n><t>Comp.<br/>Type</t></h><h><n>ObjectClassQualifier</n><t>Obj. Class<br/>Qual.</t></h><h><n>ObjectClass</n><t>Class</t></h><h><n>PropertyTermQualifier</n><t>Prop. Term<br/>Qualifier</t></h><h><n>PropertyTermPossessiveNoun</n><t>Prop. Term<br/>Poss. Noun</t></h><h><n>PropertyTermPrimaryNoun</n><t>Prop. Term<br/>Prim. Noun</t></h><h skip=""><n>PropertyTerm</n><t>Prop. Term</t></h><h><n>DataTypeQualifier</n><t>Data Type<br/>Qualifier</t></h><h><n>DataType</n><t>Data Type</t></h><h><n>AssociatedObjectClassQualfier</n><t>Assoc. Obj.<br/>Class Qual.</t></h><h><n>AssociatedObjectClass</n><t>Assoc.<br/>Class</t></h></row></xsl:document></xsl:variable></xsl:stylesheet>