<?xml version="1.0" encoding="UTF-8"?>
<!--
Crane-checkgc4obdndr-obfuscated.xsl

This is a stylesheet to analyze the genericode representation of a OASIS
Business Document NDR 3.0 CCTS model, reporting on inconsistencies or 
invalidly-expressed values. The version of NDR implemented by these 
stylesheets is found at:

  http://docs.oasis-open.org/ubl/UBL-NDR/v3.0/UBL-NDR-v3.0.html
  
Note that only the COMxx and MODxx rules that are programmatically tested are
tested by this stylesheet, as those rules are for the CCTS model.  This
stylesheet does not test any generated schemas for conformance to the NDR,
a genericode-expressed CCTS model.

When two models are supplied as arguments the stylesheet creates reports of
the differences between the two, including an analysis of non-backward-
compatible changes.  The difference reports can be exported as DocBook tables.

Please see "CreatingExtensionsWithUBLNDR.html" for an illustration of using
these stylesheets

Copyright (C) - Crane Softwrights Ltd. 
              - http://www.CraneSoftwrights.com/links/training-gctk.htm

Portions copyright (C) - OASIS Open 2016. All Rights Reserved.
                       - http://www.oasis-open.org/who/intellectualproperty.php

This documentation and the URI resolution of the XSLT processor both presume
the use of the free Saxon9HE XSLT processor from http://saxon.sf.net ... if
that XSLT 2.0 processor is not being used, then the results may not be as
expected.

Typical invocation (HTML output to standard output):

  java -jar saxon9he.jar {arguments}

Mandatory Invocation arguments (URI's are relative to the input):

 - stylesheet file:            -xsl:Crane-checkgc4obdndr-obfuscated.xsl
 - input new genericode file   -s:{filename}
 - output HTML file            -o:filename
 - document title suffix       "title-suffix={string}"
   - this is added to the title of the generated report
 - configuration details       +config={filename} or config-uri={filename}
   - this is the same configuration file that is input to the Crane-gc2obdndr
     stylesheet that creates the schemas from the CCTS model

Necessary invocation argument when the common library has exactly one ABIE:

 - specify the model name      common-library-singleton-model-name={string}

Optional invocation arguments (where URI's are relative to the input):

 - old genericode file                 +old={filename} or old-uri={filename}
   - to specify an older version of the model to analyze a comparison
 - base genericode file                +base={filename} or base-uri={filename}
   - to specify a base library for use by extension components
 - pre-created xsd base directory      xsd-dir-uri={filename}
   - specifying this engages the NDR tests of the XSD files
 - pre-created xsdrt base directory    xsdrt-dir-uri={filename}
   - specifying this engages the NDR tests of the XSD files

Optional invocation arguments (where URI's are relative to the output):

 - output DocBook file URI common      docbook-common-uri=file://{filename}
 - output DocBook file URI maindoc     docbook-maindoc-uri=file://{filename}

Optional invocation arguments:

 - change column title suffix               "change-suffix={string}"
   - this is added in the title row of the table summarizing changes from
     the old genericode file to the new genericode file
 - a particular subset of some models       subset-model-regex={string}
 - a particular subset of some constructs   subset-column-name={string-no-sp}
   - the string value of the column name must have all of the spaces removed
     from the column name in the spreadsheet used to create the genericode file
 - useful during development                ignore-sort-rule={no(default)/yes}
 
THE AUTHOR MAKES NO REPRESENTATION ABOUT THE SUITABILITY OF THIS CODE FOR ANY
PURPOSE. THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR 
IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES 
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN 
NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED 
TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, 
EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

IMPLEMENTATION NOTE:

This stylesheet logic does not accommodate qualified object classes.

TECHNICAL NOTE:

This stylesheet has been purposely obfuscated and all comments have been
removed.  Please respect our copyright and do not attempt to reverse 
engineer the techniques involved.

(For those readers who are curious, the latest NDR document is dated after the
UBL 2.1 schemas were published and so there are a number of errors reported for
UBL 2.1 that will be repaired in future versions)

Configuration details file:

The configuration file has two major sections, the <ndr> section and the 
<schema> section.

The <ndr> section describes properties of the use of the naming and design
rules, such as abbreviations, equivalences, expected BIEs and data types.  This
information is not used in the schema generation.

All allowed abbreviations must be itemized as these are the portions of 
element names that do not satisfy the UpperCamelCase convention.  What is not
shown in the example below is that the <abbreviation> element can have an
optional valuesOnly="" or namesOnly="" attribute to indicate that the
abbreviation is not applicable to both values and names.

All equivalences between primary nouns and representation terms must be
itemized.

All fields allowing excess space characters must be named by their genericode
column names.

All mandatory BIEs for each maindoc must be itemized with their cardinality
and, optionally, their order.

All allowed unqualified data types must be itemized to ensure nothing 
unsupported is asked for.

The <schema> section describes all of the directories and files that are 
created or files that are needed by the files that are created as part of 
schema generation.  See the documentation for the schema generation program for
details.

This checking program only checks the model-related NDRs of MODxx and COMxx.  
The schema-related rules are not checked.

The configuration file used for UBL 2.1 is found in the ubl/ directory, and for
BDE 1.1 in the bde/ directory.


Crane-checkgc4obdndr.xsl $Id: Crane-checkgc4obdndr.xsl,v 1.15 2016/05/26 20:32:38 admin Exp $
Crane-commonndr.xsl $Id: Crane-commonndr.xsl,v 1.34 2016/05/07 16:53:52 admin Exp $
Crane-utilndr.xsl $Id: Crane-utilndr.xsl,v 1.9 2016/05/02 20:32:39 admin Exp $
ndrSubset.xsl $Id: ndrSubset.xsl,v 1.35 2016/05/29 16:47:02 admin Exp $
checkgc4obdndr-model.xsl $Id: checkgc4obdndr-model.xsl,v 1.18 2016/05/29 16:48:59 admin Exp $
checkgc4obdndr-report.xsl $Id: checkgc4obdndr-report.xsl,v 1.12 2016/05/29 00:30:43 admin Exp $
checkgc4obdndr-rules.xsl $Id: checkgc4obdndr-rules.xsl,v 1.16 2016/05/29 16:49:00 admin Exp $
checkgc4obdndr-schema.xsl $Id: checkgc4obdndr-schema.xsl,v 1.2 2016/04/28 20:33:08 admin Exp $
-->
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:xs="http://www.CraneSoftwrights.com/ns/xslstyle" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:gu="urn:X-gc2obdndr" exclude-result-prefixes="xs xsd gu" version="2.0"><xsl:param name="common-library-singleton-model-name" as="xsd:string?" select="()"/><xsl:variable name="gu:I2068573751" as="document-node()" select="/"/><xsl:param name="base-uri" as="xsd:anyURI?" select="()"/><xsl:variable xmlns:gc="http://docs.oasis-open.org/codelist/ns/genericode/1.0/" name="gu:I1034286875" as="document-node()?" select="if( $base-uri ) then for $u in resolve-uri( $base-uri, document-uri(/) ) return if( doc-available($u) ) then doc($u)[gc:CodeList] else () else ()"/><xsl:variable name="gu:I689524583" as="xsd:string+" select="('UBLName','ComponentName','Name')"/><xsl:variable name="gu:I517143437" as="xsd:string?"><xsl:variable name="gu:O413714750" as="element(model)+"><xsl:for-each-group select="$gu:I2068573751/*/*/Row/gu:I344762291(.,'ModelName')" group-by="."><model name="{.}" count-bies="{count($gu:I2068573751/*/*/Row[gu:I344762291(.,'ModelName')=current()])}" count-abies="{count($gu:I2068573751/*/*/Row[gu:I344762291(.,'ModelName')=current()]                                         [gu:I344762291(.,'ComponentType')='ABIE'])}"/></xsl:for-each-group></xsl:variable><xsl:if test="count($gu:O413714750[@count-abies&gt;1])&gt;1"><xsl:message terminate="yes"><xsl:text>Only one model can have more than one ABIE as the </xsl:text><xsl:text>library model.</xsl:text></xsl:message></xsl:if><xsl:if test="count($gu:O413714750[@count-abies&gt;1])=0 and not($common-library-singleton-model-name)"><xsl:message terminate="yes"><xsl:text>When all models have only one ABIE then the model </xsl:text><xsl:text>to be considered the library model has to be </xsl:text><xsl:text>identified using the </xsl:text><xsl:text>"common-library-singleton-model-name" invocation </xsl:text><xsl:text>argument.</xsl:text></xsl:message></xsl:if><xsl:sequence select="if( $common-library-singleton-model-name ) then $common-library-singleton-model-name else gu:I295510535($gu:I2068573751)"/></xsl:variable><xsl:function name="gu:I295510535" as="xsd:string?"><xsl:param name="gc" as="document-node()?"/><xsl:variable name="gu:O258571718" as="xsd:string*"><xsl:for-each-group group-by="gu:I344762291(.,'ModelName')" select="$gc/*/SimpleCodeList/Row[gu:I344762291(.,'ComponentType')='ABIE']"><xsl:if test="count(current-group())&gt;1"><xsl:value-of select="current-grouping-key()"/></xsl:if></xsl:for-each-group></xsl:variable><xsl:if test="count($gu:O258571718) &gt; 1"><xsl:message terminate="yes"><xsl:text>More than one common library model identified in </xsl:text><xsl:value-of select="document-uri($gc)"/><xsl:text> in that there are </xsl:text><xsl:value-of select="count($gu:O258571718)"/><xsl:text> models with more than one ABIE: </xsl:text><xsl:value-of select="$gu:O258571718" separator=","/></xsl:message></xsl:if><xsl:sequence select="if( empty($gu:O258571718) ) then if( $gc is $gu:I1034286875 ) then () else gu:I295510535($gu:I1034286875) else $gu:O258571718"/></xsl:function><xsl:function name="gu:I344762291" as="element(SimpleValue)?"><xsl:param name="row" as="element(Row)"/><xsl:param name="col" as="xsd:string*"/><xsl:variable name="gu:I229841527" as="element(SimpleValue)*" select="$row/Value[@ColumnRef=$col]/SimpleValue"/><xsl:if test="count($gu:I229841527) &gt; 1"><xsl:message terminate="yes"><xsl:text>Data error: multiple genericode values in a single </xsl:text><xsl:text>row for column reference</xsl:text><xsl:if test="count($col)&gt;1">s</xsl:if>: <xsl:text/><xsl:value-of select="$col" separator=","/> at <xsl:text/><xsl:for-each select="$row/ancestor-or-self::*"><xsl:text/>/<xsl:value-of select="name(.)"/><xsl:if test="self::Row">[<xsl:number/>]</xsl:if></xsl:for-each></xsl:message></xsl:if><xsl:sequence select="$gu:I229841527"/></xsl:function><xsl:function name="gu:I206857375" as="xsd:string?"><xsl:param name="item" as="item()?"/><xsl:sequence select="translate(normalize-space($item),' ','')"/></xsl:function><xsl:function name="gu:I188052159" as="xsd:string?"><xsl:param name="row" as="element(Row)"/><xsl:param name="col" as="xsd:string+"/><xsl:sequence select="gu:I206857375(gu:I344762291($row,$col))"/></xsl:function><xsl:param name="base-config-uri" select="()" as="xsd:anyURI?"/><xsl:param name="config" as="document-node()?" select="if( not($config-uri) ) then () else doc(resolve-uri($config-uri,base-uri(/)))"/><xsl:param name="config-uri" as="xsd:string?"/><xsl:variable name="gu:I172381145" as="document-node()?" select="$config"/><xsl:variable name="gu:I159121057" as="element()*"><xsl:variable name="gu:I147755267" select="$gu:I172381145/*/schema//(file | files)"/><xsl:if test="$gu:I172381145/*/schema"><xsl:variable name="gu:O137904916"><xsl:if test="count( ( $gu:I147755267[@type='DABIE'][1], $gu:I147755267[@type='XABIE'][1], $gu:I147755267[@type='AABIE'][1] ) ) != 1 or $gu:I147755267[not(@type=('DABIE','CABIE','CBBIE','QDT','UDT','EXT', 'XABIE','AABIE','SABIE','SBBIE','CVA'))]"><xsl:text>Files can be created only for one type of output, </xsl:text><xsl:text>either UBL documents (DABIE), extensions (XABIE) or </xsl:text><xsl:text>additional non-UBL documents (AABIE).
</xsl:text></xsl:if><xsl:if test="$gu:I147755267[@type=('SABIE','SBBIE')] and not($gu:I147755267[@type=('XABIE','AABIE')])"><xsl:text>Supplementary common library schemas can only be </xsl:text><xsl:text>created for extensions or additional documents.
</xsl:text></xsl:if><xsl:if test="$gu:I147755267[@type=('CABIE','CBBIE')] and $gu:I147755267[@type=('XABIE','AABIE')]"><xsl:text>Common library schemas can only be created when not </xsl:text><xsl:text>creating extensions or additional documents. </xsl:text><xsl:text>Reference common library schemas used in a common </xsl:text><xsl:text>library configuration.
</xsl:text></xsl:if><xsl:if test="count($gu:I147755267[@type='CVA'])&gt;1"><xsl:text>Can create only a single CVA file at a time.
</xsl:text></xsl:if><xsl:for-each select="$gu:I147755267[self::files and @prefix]"><xsl:text>A prefix cannot be specified when creating multiple </xsl:text><xsl:text>files.</xsl:text><xsl:value-of select="gu:I129285859(.)"/><xsl:text>
</xsl:text></xsl:for-each><xsl:if test="not($gu:I147755267)"><xsl:text>Some files must be specified for schema generation
</xsl:text></xsl:if></xsl:variable><xsl:if test="normalize-space($gu:O137904916)"><xsl:message terminate="yes" select="$gu:O137904916"/></xsl:if><xsl:sequence select="$gu:I147755267"/></xsl:if></xsl:variable><xsl:variable name="gu:O121680808" as="document-node()?" select="if( $base-config-uri ) then for $u in resolve-uri( $base-config-uri, document-uri(/) ) return if( doc-available($u) ) then doc($u) else () else ()"/><xsl:variable name="gu:I114920763" as="document-node()"><xsl:document><combination><xsl:for-each select="$gu:I172381145,$gu:O121680808"><xsl:for-each select="*"><xsl:copy><xsl:copy-of select="@*"/><xsl:attribute name="xml:base" select="base-uri(.)"/><xsl:copy-of select="node()"/></xsl:copy></xsl:for-each></xsl:for-each></combination></xsl:document></xsl:variable><xsl:key name="gu:I147755267" match="file|files" use="@type"/><xsl:variable name="gu:O108872302" as="xsd:string?" select="gu:I295510535($gu:I1034286875)"/><xsl:variable name="gu:I103428687" as="element(Row)*"><xsl:variable name="gu:I98503511" select="(key('gu:I147755267','XABIE',$gu:I114920763), key('gu:I147755267','AABIE',$gu:I114920763))/@abie"/><xsl:choose><xsl:when test="$gu:I98503511"><xsl:sequence select="$gu:I98503511/ key('gu:I94026079',.,$gu:I2068573751) [if( not( $subset-model-regex ) ) then true() else matches(gu:I344762291(.,'ModelName'),$subset-model-regex)]"/></xsl:when><xsl:otherwise><xsl:for-each-group select="/*/SimpleCodeList/ Row[gu:I344762291(.,'ModelName')!=$gu:I517143437] [gu:I344762291(.,'ComponentType')='ABIE'] [ if( not( $subset-model-regex ) ) then true() else matches(gu:I344762291(.,'ModelName'),$subset-model-regex)]" group-by="gu:I344762291(.,$gu:I689524583)"><xsl:sequence select="."/></xsl:for-each-group></xsl:otherwise></xsl:choose></xsl:variable><xsl:variable name="gu:I89937989" as="element(SimpleValue)*" select="$gu:I103428687/gu:I344762291(.,$gu:I689524583)"/><xsl:variable name="gu:O86190572" as="element(Row)*" select="$gu:I103428687 [ if( not( $subset-model-regex ) ) then true() else matches(gu:I344762291(.,'ModelName'),$subset-model-regex) ]"/><xsl:variable name="gu:O82742950" as="element(SimpleValue)*" select="$gu:O86190572/gu:I344762291(.,'ModelName')"/><xsl:variable name="gu:O79560528" as="element(SimpleValue)*" select="$gu:O86190572/gu:I344762291(.,'ObjectClass')"/><xsl:variable name="gu:O76613842" as="xsd:string" select="concat(key('gu:I147755267','CBBIE',$gu:I114920763)/@prefix,':')"/><xsl:variable name="gu:I73877633" as="xsd:string" select="concat(key('gu:I147755267','CABIE',$gu:I114920763)/@prefix,':')"/><xsl:variable name="gu:I71330129" as="xsd:string" select="concat(key('gu:I147755267','SBBIE',$gu:I114920763)/@prefix,':')"/><xsl:variable name="gu:O68952458" as="xsd:string" select="concat(key('gu:I147755267','SABIE',$gu:I114920763)/@prefix,':')"/><xsl:function name="gu:I66728185" as="xsd:string"><xsl:param name="name" as="xsd:string"/><xsl:param name="string" as="xsd:string"/><xsl:value-of><xsl:analyze-string select="$string" regex="%(.)"><xsl:matching-substring><xsl:value-of select="if(regex-group(1)='%') then '%' else if(regex-group(1)='f') then $name else if(regex-group(1)='n') then replace($name,'.*/','') else if(regex-group(1)='t') then format-dateTime( current-dateTime(), '[Y0001]-[M01]-[D01] [H01]:[m01][Z]' ) else if(regex-group(1)='z') then format-dateTime( adjust-dateTime-to-timezone(current-dateTime(),xsd:dayTimeDuration('PT0H')), '[Y0001]-[M01]-[D01] [H01]:[m01]z' ) else ."/></xsl:matching-substring><xsl:non-matching-substring><xsl:value-of select="."/></xsl:non-matching-substring></xsl:analyze-string></xsl:value-of></xsl:function><xsl:function name="gu:I129285859" as="xsd:string"><xsl:param name="this" as="element()"/><xsl:value-of><xsl:for-each select="$this/ancestor-or-self::*"><xsl:text/>/<xsl:value-of select="name(.)"/><xsl:if test="parent::*">[<xsl:number/>]</xsl:if></xsl:for-each><xsl:text>: </xsl:text><xsl:for-each select="$this"><xsl:text/>&lt;<xsl:value-of select="name(.)"/><xsl:for-each select="@*"><xsl:value-of select="concat(' ',name(.),'=&#34;',.,'&#34;')"/></xsl:for-each><xsl:text>&gt;</xsl:text></xsl:for-each></xsl:value-of></xsl:function><xsl:param name="subset-result" as="xsd:string" select="'no'"/><xsl:param name="subset-model-regex" as="xsd:string?"/><xsl:param name="subset-column-name" as="xsd:string?"/><xsl:param name="doc-column-names-regex" as="xsd:string?"/><xsl:param name="subset-absent-is-zero" as="xsd:string" select="'no'"/><xsl:param name="subset-exclusions" as="xsd:string" select="'yes'"/><xsl:param name="subset-include-type-elements" as="xsd:string" select="'yes'"/><xsl:param name="subset-include-ignored-types" as="xsd:string" select="'yes'"/><xsl:variable name="gu:I64642929" as="xsd:boolean" select="not(starts-with('no',lower-case($subset-absent-is-zero)))"/><xsl:variable name="gu:I62684053" as="xsd:boolean" select="starts-with('yes',lower-case($subset-exclusions))"/><xsl:variable name="gu:O60840404" as="xsd:boolean" select="starts-with('yes',lower-case($subset-include-type-elements))"/><xsl:variable name="gu:I59102107" as="xsd:boolean" select="starts-with('yes',lower-case($subset-include-ignored-types))"/><xsl:variable name="gu:I57460381" as="xsd:string?" select="translate(normalize-space($subset-column-name),' ','')"/><xsl:key name="gu:O55907398" match="Column" use="ShortName"/><xsl:variable name="gu:I54436151" as="xsd:string?" select="key('gu:O55907398',$gu:I57460381)/LongName"/><xsl:variable name="gu:O53040352" as="xsd:boolean" select="string($subset-column-name) or string($subset-model-regex) or not(starts-with('no',lower-case($subset-result)))"/><xsl:variable name="gu:I51714343" as="element(Column)*"><xsl:if test="exists($doc-column-names-regex)"><xsl:sequence select="$gu:I2068573751/*/ColumnSet/Column [matches(ShortName,$doc-column-names-regex)]"/></xsl:if></xsl:variable><xsl:function name="gu:I49251755" as="xsd:boolean"><xsl:param name="gu:O50453018" as="element(Row)"/><xsl:sequence select="if( not( $gu:O53040352 ) ) then true() else ( some $gu:O48106366 in ($gu:I47013039,$gu:O86190572) satisfies $gu:O48106366 is $gu:O50453018 )"/></xsl:function><xsl:function name="gu:O44968994" as="xsd:boolean"><xsl:param name="gu:I45968305" as="element(Row)"/><xsl:sequence select="if( not( $gu:O53040352 ) ) then true() else if( gu:I344762291($gu:I45968305,'ComponentType')='ABIE' ) then gu:I49251755( $gu:I45968305 ) else if( not( gu:I49251755( $gu:I45968305/ preceding-sibling::Row[gu:I344762291(.,'ComponentType')='ABIE'][1] ) ) ) then false() else not( gu:I44012207($gu:I45968305) )"/></xsl:function><xsl:variable name="gu:O43095286" as="element(Row)*" select="$gu:I2068573751/*/SimpleCodeList/Row"/><xsl:variable name="gu:O42215790" as="element(Row)*" select="($gu:O86190572,$gu:I47013039)/ key('gu:I41371475',gu:I344762291(.,'ObjectClass')) [not( gu:I44012207(.) )]"/><xsl:variable name="gu:I40560269" as="element(Row)*" select="$gu:O42215790[gu:I344762291(.,'ComponentType')='ASBIE']"/><xsl:variable name="gu:O39780264" as="element(Row)*" select="$gu:O42215790[gu:I344762291(.,'ComponentType')='BBIE']"/><xsl:variable name="gu:I39029693" as="element(Row)*" select="$gu:I40560269 [ for $gu:I38306921 in gu:I344762291(.,'AssociatedObjectClass') return ( not( key('gu:I37610431',$gu:I38306921) ) or ( every $gu:O36938816 in key('gu:I41371475',$gu:I38306921) satisfies gu:I44012207( $gu:O36938816 ) ) ) ]"/><xsl:variable name="gu:I36290767" as="element(Row)*"><xsl:sequence select="$gu:O43095286[gu:I344762291(.,'ComponentType')='ABIE'] [gu:I344762291(.,'ModelName')=$gu:I517143437]"/></xsl:variable><xsl:variable name="gu:I47013039" as="element(Row)*"><xsl:sequence select="if( $gu:O53040352 ) then gu:O35665064( $gu:O86190572 ) else $gu:O43095286[gu:I344762291(.,'ComponentType')='ABIE'] [gu:I344762291(.,'ModelName')=$gu:I517143437]"/></xsl:variable><xsl:function name="gu:O35665064" as="element(Row)*"><xsl:param name="gu:O35060572" as="element(Row)*"/><xsl:variable name="gu:I34476229" select="$gu:O35060572/ key('gu:I33911045',gu:I344762291(.,'ObjectClass'),$gu:I2068573751) [not(gu:I44012207(.))]/gu:I344762291(.,'AssociatedObjectClass')"/><xsl:variable name="gu:O33364092" select="for $each in $gu:I34476229 return $gu:I2068573751/key('gu:I37610431',$each,.)"/><xsl:sequence select="gu:I32834503( ($gu:O35060572,$gu:O33364092), ( for $gu:O32321464 in $gu:I2068573751 return $gu:O33364092/key('gu:I33911045', gu:I344762291(.,'ObjectClass')) [not( gu:I44012207(.) )]/ key('gu:I37610431', gu:I344762291(.,'AssociatedObjectClass'),$gu:O32321464)))"/></xsl:function><xsl:function name="gu:I32834503" as="element(Row)*"><xsl:param name="gu:I31824211" as="element(Row)*"/><xsl:param name="gu:I30874235" as="element(Row)*"/><xsl:variable name="gu:O30420202" select="$gu:I30874235[1]"/><xsl:choose><xsl:when test="not($gu:O30420202)"><xsl:sequence select="$gu:I31824211"/></xsl:when><xsl:when test="some $gu:I29979329 in $gu:I31824211 satisfies $gu:I29979329 is $gu:O30420202"><xsl:sequence select="gu:I32834503($gu:I31824211, $gu:I30874235 except $gu:O30420202)"/></xsl:when><xsl:otherwise><xsl:sequence select="gu:I32834503( (:add this to the set found so far:) ( $gu:I31824211, $gu:O30420202 ), (:add its references to the ones being looked for:) ( $gu:I30874235, ($gu:I2068573751,$gu:I1034286875)/ key('gu:I33911045', gu:I344762291($gu:O30420202,'ObjectClass')) [not( gu:I44012207(.) )]/ key('gu:I37610431', gu:I344762291(.,'AssociatedObjectClass')) ) except ( $gu:I31824211, $gu:O30420202 ) )"/></xsl:otherwise></xsl:choose></xsl:function><xsl:template name="gu:I29551053"><xsl:choose><xsl:when test="not($gu:O53040352)"/><xsl:when test="string($subset-column-name) and ( every $gu:I29134841 in ($gu:I2068573751,$gu:I1034286875)/*/SimpleCodeList/Row/gu:I344762291(.,$subset-column-name) satisfies normalize-space($gu:I29134841)='' )"><xsl:text>No subset information found for named column: </xsl:text><xsl:value-of select="$subset-column-name"/><xsl:text>
</xsl:text></xsl:when><xsl:when test="string($subset-model-regex) and ( every $gu:O28730190 in distinct-values( ($gu:I2068573751,$gu:I1034286875)/*/SimpleCodeList/Row/gu:I344762291(.,'ModelName') ) satisfies not( matches($gu:O28730190,$subset-model-regex) ) )"><xsl:text>No subset information found for model regex: </xsl:text><xsl:value-of select="$subset-model-regex"/><xsl:text>
</xsl:text></xsl:when><xsl:otherwise><xsl:for-each select="$gu:I47013039"><xsl:variable name="gu:O28336626" select="key('gu:I41371475',gu:I344762291(.,'ObjectClass'))"/><xsl:choose><xsl:when test="count($gu:O28336626)=0"><xsl:text>The ABIE appears corrupted in that it has no </xsl:text><xsl:text>BIEs: </xsl:text><xsl:value-of select="gu:I344762291(.,'DictionaryEntryName')"/><xsl:text>
</xsl:text></xsl:when><xsl:when test="not( gu:I27953699(.) )"/><xsl:when test="not( some $gu:O36938816 in $gu:O28336626 satisfies not( gu:I44012207($gu:O36938816) ) )"><xsl:text>An ABIE cannot have all of its members excluded </xsl:text><xsl:text>in a subset: </xsl:text><xsl:value-of select="gu:I344762291(.,'DictionaryEntryName')"/><xsl:text>
</xsl:text></xsl:when></xsl:choose><xsl:for-each select="$gu:O28336626"><xsl:variable name="gu:I27580983" select="normalize-space(gu:I344762291(.,'Cardinality'))"/><xsl:variable name="gu:I27218075" select="normalize-space(gu:I344762291(.,$gu:I57460381))"/><xsl:choose><xsl:when test="not($gu:I27218075 = ('','0','0..1','1','0..n','1..n'))"><xsl:text>Invalid value "</xsl:text><xsl:value-of select="$gu:I27218075"/><xsl:text>" for subset cardinality: </xsl:text><xsl:value-of select="gu:I344762291(.,'DictionaryEntryName')"/><xsl:text>
</xsl:text></xsl:when><xsl:when test="not($gu:I27580983 = ('','0..1','1','0..n','1..n'))"><xsl:text>Invalid value "</xsl:text><xsl:value-of select="$gu:I27218075"/><xsl:text>" for original cardinality: </xsl:text><xsl:value-of select="gu:I344762291(.,'DictionaryEntryName')"/><xsl:text>
</xsl:text></xsl:when><xsl:when test="$gu:I27218075=''"/><xsl:when test="substring($gu:I27580983,1,1)='1' and not( substring($gu:I27218075,1,1)='1')"><xsl:text>The minimum cardinality cannot be lowered </xsl:text><xsl:text>from "</xsl:text><xsl:value-of select="$gu:I27580983"/><xsl:text>" to "</xsl:text><xsl:value-of select="$gu:I27218075"/><xsl:text>": </xsl:text><xsl:value-of select="gu:I344762291(.,'DictionaryEntryName')"/><xsl:text>
</xsl:text></xsl:when><xsl:when test="substring($gu:I27580983,string-length($gu:I27580983),1)='1' and substring($gu:I27218075,string-length($gu:I27218075),1)='n'"><xsl:text>The maximum cardinality cannot be raised </xsl:text><xsl:text>from "</xsl:text><xsl:value-of select="$gu:I27580983"/><xsl:text>" to "</xsl:text><xsl:value-of select="$gu:I27218075"/><xsl:text>": </xsl:text><xsl:value-of select="gu:I344762291(.,'DictionaryEntryName')"/><xsl:text>
</xsl:text></xsl:when></xsl:choose></xsl:for-each></xsl:for-each></xsl:otherwise></xsl:choose></xsl:template><xsl:function name="gu:I27953699" as="xsd:boolean"><xsl:param name="gu:O26864594" as="element(Row)"/><xsl:sequence select="exists( ($gu:I2068573751/key('gu:O26520176',gu:I344762291($gu:O26864594,'ObjectClass')), $gu:I1034286875/key('gu:O26520176',gu:I344762291($gu:O26864594,'ObjectClass'))) [gu:O44968994(.)] )"/></xsl:function><xsl:function name="gu:I26184477" as="xsd:boolean"><xsl:param name="gu:O26864594" as="element(Row)"/><xsl:sequence select="gu:I344762291($gu:O26864594,'ModelName')=$gu:O82742950"/></xsl:function><xsl:function name="gu:I25857171" as="xsd:string"><xsl:param name="row" as="element(Row)"/><xsl:param name="minimumFlag" as="xsd:boolean"/><xsl:for-each select="(normalize-space(gu:I344762291($row,$gu:I57460381)) [$gu:O53040352][string(.)], gu:I344762291($row,'Cardinality')[$gu:I64642929] [starts-with(normalize-space(.),'0')] [$gu:O53040352]/'0', normalize-space(gu:I344762291($row,'Cardinality')))[1]"><xsl:choose><xsl:when test="$minimumFlag"><xsl:value-of select="substring(.,1,1)"/></xsl:when><xsl:when test="ends-with(.,'n')">unbounded</xsl:when><xsl:otherwise><xsl:value-of select="substring(.,string-length(.),1)"/></xsl:otherwise></xsl:choose></xsl:for-each></xsl:function><xsl:function name="gu:I25537947" as="xsd:string"><xsl:param name="row" as="element(Row)"/><xsl:sequence select="gu:I25857171($row,true())"/></xsl:function><xsl:function name="gu:I25226509" as="xsd:string"><xsl:param name="row" as="element(Row)"/><xsl:sequence select="gu:I25857171($row,false())"/></xsl:function><xsl:function name="gu:I44012207" as="xsd:boolean"><xsl:param name="row" as="element(Row)"/><xsl:sequence select="gu:I25537947($row)='0' and gu:I25226509($row)='0'"/></xsl:function><xsl:key name="gu:I24922575" match="Row[gu:I344762291(.,'ComponentType')='ABIE']" use="if( gu:I344762291(.,'ModelName')=$gu:I517143437 ) then $gu:I517143437 else gu:I344762291(.,$gu:I689524583)"/><xsl:key name="gu:I24625877" match="Row" use="gu:I344762291(.,'DictionaryEntryName')"/><xsl:key name="gu:I24336161" match="Row[gu:I344762291(.,'ComponentType')='BBIE']" use="gu:I344762291(.,$gu:I689524583)"/><xsl:key name="gu:I94026079" match="Row[gu:I344762291(.,'ComponentType')='ABIE']" use="gu:I344762291(.,$gu:I689524583)"/><xsl:key name="gu:I37610431" match="Row[gu:I344762291(.,'ComponentType')='ABIE']" use="gu:I344762291(.,'ObjectClass')"/><xsl:key name="gu:I24053183" match="Row" use="gu:I344762291(.,'ComponentType')"/><xsl:key name="gu:I23776709" match="Row[gu:I344762291(.,'DataType')]" use="gu:I344762291(.,'DataType')"/><xsl:key name="gu:I23506519" match="Row[gu:I344762291(.,'ComponentType')!='ABIE']" use="preceding-sibling::Row[gu:I344762291(.,'ComponentType')='ABIE'][1]/ gu:I344762291(.,'ObjectClass')"/><xsl:key name="gu:I41371475" match="Row[gu:I344762291(.,'ComponentType')!='ABIE']" use="gu:I344762291(.,'ObjectClass')"/><xsl:key name="gu:I23242401" match="Row" use="concat( gu:I344762291(.,'ObjectClass'),' ', gu:I344762291(.,$gu:I689524583),' ', gu:I344762291(.,'ComponentType'))"/><xsl:key name="gu:O22984152" match="Row[gu:I344762291(.,'ComponentType')='ASBIE']" use="preceding-sibling::Row[gu:I344762291(.,'ComponentType')='ABIE'][1]/ gu:I344762291(.,$gu:I689524583)"/><xsl:key name="gu:I33911045" match="Row[gu:I344762291(.,'ComponentType')='ASBIE']" use="preceding-sibling::Row[gu:I344762291(.,'ComponentType')='ABIE'][1]/ gu:I344762291(.,'ObjectClass')"/><xsl:key name="gu:O26520176" match="Row[gu:I344762291(.,'ComponentType')='ASBIE']" use="gu:I344762291(.,'AssociatedObjectClass')"/><xsl:key name="gu:I22731579" match="Row[gu:I344762291(.,'ComponentType')='BBIE']" use="gu:I344762291(.,'DataType')"/><xsl:variable name="gu:I22484497" as="element(SimpleValue)*"><xsl:for-each-group select="/*/SimpleCodeList/Row/gu:I344762291(.,'ModelName')" group-by="."><xsl:sequence select="."/></xsl:for-each-group></xsl:variable><xsl:variable name="gu:O22242728" as="element(SimpleValue)*" select="$gu:I36290767/gu:I344762291(.,$gu:I689524583)"/><xsl:variable name="gu:I22006103" as="element(SimpleValue)*" select="$gu:I47013039/gu:I344762291(.,$gu:I689524583)"/><xsl:variable name="gu:O21774460" as="element(allow)*"><allow old="0"><allowed>0..1</allowed><allowed>0..n</allowed></allow><allow old="0..1"><allowed>0..1</allowed><allowed>0..n</allowed></allow><allow old="0..n"><allowed>0..n</allowed></allow><allow old="1"><allowed>0..1</allowed><allowed>0..n</allowed><allowed>1</allowed><allowed>1..n</allowed></allow><allow old="1..n"><allowed>1..n</allowed><allowed>0..n</allowed></allow></xsl:variable><xsl:function name="gu:I21547643" as="xsd:string?"><xsl:param name="value" as="xsd:string?"/><xsl:sequence select="translate(normalize-space($value),' ','')"/></xsl:function><xsl:key name="gu:O21325502" match="abbreviation" use="."/><xsl:function name="gu:O21325502" as="xsd:string?"><xsl:param name="gu:I21107895" as="xsd:string?"/><xsl:sequence select="(key('gu:O21325502',$gu:I21107895,$config)/@short,gu:I21547643($gu:I21107895))[1]"/></xsl:function><xsl:variable name="gu:O20894684" as="element()*" select="$config/*/ndr/equivalences/equivalence"/><xsl:function name="gu:O20280134" as="xsd:boolean"><xsl:param name="gu:I20685737" as="xsd:string?"/><xsl:param name="gu:O20480928" as="xsd:string?"/><xsl:sequence select="( $gu:I20685737 = $gu:O20480928 ) or exists($gu:O20894684 [$gu:I20685737 = primary-noun and $gu:O20480928 = representation-term])"/></xsl:function><xsl:variable name="gu:O20083240" as="element(ndrinfo)*"><xsl:for-each select="$old//Row"><xsl:variable name="gu:O19890132" select="gu:I344762291(.,'ObjectClass')"/><xsl:variable name="gu:O19700702" select="concat( gu:I344762291(.,'ObjectClass'),' ', gu:I344762291(.,$gu:I689524583),' ', gu:I344762291(.,'ComponentType'))"/><xsl:variable name="gu:O19514846" select="gu:I344762291(.,'DictionaryEntryName')"/><xsl:variable name="gu:O19332464" select="key('gu:I23242401',$gu:O19700702,$new) [gu:I344762291(.,'ObjectClass')=$gu:O19890132]/ gu:I344762291(.,'DictionaryEntryName')"/><xsl:if test="not(key('gu:I24625877',$gu:O19514846,$new)) and exists($gu:O19332464)"><ndrinfo gu:I17987597="{$gu:O19514846}" gu:I7865299="gu:O20083240" gu:O9576730="{$gu:O19332464}"/></xsl:if></xsl:for-each></xsl:variable><xsl:variable name="gu:O19153460" as="element(ndrinfo)*"><xsl:for-each select="$old//Row[gu:I344762291(.,'DataTypeQualifier')]"><xsl:variable name="gu:O19514846" select="gu:I344762291(.,'DictionaryEntryName')"/><xsl:variable name="gu:O18977740" select="concat(gu:I344762291(.,'ObjectClass'),' ', gu:I344762291(.,$gu:I689524583),' ', gu:I344762291(.,'ComponentType'))"/><xsl:variable name="gu:I18805215" select="gu:I344762291(.,'DataTypeQualifier')"/><xsl:variable name="gu:I18635799" select="key('gu:I23242401',$gu:O18977740,$new)"/><xsl:if test="exists($gu:I18635799) and not($gu:I18635799/gu:I344762291(.,'DataTypeQualifier')=$gu:I18805215)"><ndrinfo gu:I17987597="{$gu:O19514846}" old="{$gu:I18805215}" gu:I7865299="gu:O19153460" new="{key('gu:I24625877',$gu:O19514846,$new)/                  gu:I344762291(.,'DataTypeQualifier')}"/></xsl:if></xsl:for-each></xsl:variable><xsl:variable name="gu:O18469408" as="element(ndrinfo)*"><xsl:variable name="gu:I18805215" select="distinct-values($old//Row/gu:I344762291(.,'DataTypeQualifier'))"/><xsl:for-each select="$new//Row[gu:I344762291(.,'DataTypeQualifier')]"><xsl:variable name="gu:O19332464" select="gu:I344762291(.,'DictionaryEntryName')"/><xsl:variable name="gu:O18305962" select="gu:I344762291(.,'DataTypeQualifier')"/><xsl:if test="not($gu:O18305962 = $gu:I18805215)"><ndrinfo gu:I17987597="{$gu:O19332464}" new="{$gu:O18305962}" gu:I7865299="gu:O18469408"/></xsl:if></xsl:for-each></xsl:variable><xsl:variable name="gu:I18145383" as="element(ndrbad)*"><xsl:for-each select="$old//Row[gu:I344762291(.,'Cardinality')]"><xsl:variable name="gu:I17987597" select="gu:I344762291(.,'DictionaryEntryName')"/><xsl:variable name="gu:O18977740" select="concat(gu:I344762291(.,'ObjectClass'),' ', gu:I344762291(.,$gu:I689524583),' ', gu:I344762291(.,'ComponentType'))"/><xsl:variable name="gu:O17832532" select="gu:I344762291(.,'Cardinality')"/><xsl:variable name="gu:I18635799" select="key('gu:I23242401',$gu:O18977740,$new)"/><xsl:variable name="gu:I17680117" select="$gu:I18635799/gu:I344762291(.,'Cardinality')"/><xsl:if test="exists( $gu:I18635799 ) and not($gu:I17680117= $gu:O21774460[@old=$gu:O17832532]/allowed)"><ndrbad gu:I17987597="{$gu:I17987597}" old="{$gu:O17832532}" gu:I7865299="gu:I18145383" new="{$gu:I17680117}"/></xsl:if></xsl:for-each><xsl:for-each select="$old//Row[gu:I344762291(.,'ComponentType')='ABIE']"><xsl:variable name="gu:O19890132" select="gu:I344762291(.,'ObjectClass')"/><xsl:variable name="gu:O17530286" select="key('gu:I41371475',$gu:O19890132,$old)"/><xsl:variable name="gu:O17382972" select="key('gu:I41371475',$gu:O19890132,$new)"/><xsl:variable name="gu:O17238114" select="$gu:O17530286/gu:I344762291(.,'DictionaryEntryName')"/><xsl:variable name="gu:O17095650" select="$gu:O17530286/gu:I344762291(.,$gu:I689524583)"/><xsl:for-each select="$gu:O17382972 [not(gu:I344762291(.,$gu:I689524583) = $gu:O17095650)]"><xsl:variable name="gu:I17680117" select="gu:I344762291(.,'Cardinality')"/><xsl:if test="not($gu:I17680117=$gu:O21774460[@old='0']/allowed)"><ndrbad gu:I17987597="{gu:I344762291(.,'DictionaryEntryName')}" gu:I7865299="gu:I18145383" old="0" new="{$gu:I17680117}"/></xsl:if></xsl:for-each></xsl:for-each></xsl:variable><xsl:variable name="gu:O16955522" as="element(ndrbad)*"><xsl:for-each select="$old//Row[gu:I344762291(.,'ComponentType')='ABIE']"><xsl:variable name="gu:O19890132" select="gu:I344762291(.,'ObjectClass')"/><xsl:if test="exists(key('gu:I41371475',$gu:O19890132,$new))"><xsl:variable name="gu:O16817672" select="key('gu:I41371475',$gu:O19890132,$old)/ gu:I344762291(.,$gu:I689524583)"/><xsl:variable name="gu:O16682046" as="document-node()"><xsl:document><xsl:for-each select="$gu:O16817672"><element name="{.}"/></xsl:for-each></xsl:document></xsl:variable><xsl:variable name="gu:O16548590" as="document-node()"><xsl:document><xsl:for-each select="key('gu:I41371475',$gu:O19890132,$new)/ gu:I344762291(.,$gu:I689524583) [.=$gu:O16817672]"><element name="{.}"/></xsl:for-each></xsl:document></xsl:variable><xsl:if test="not( deep-equal( $gu:O16682046, $gu:O16548590 ) )"><ndrbad class="{$gu:O19890132}" gu:I7865299="gu:O16955522"><old><xsl:copy-of select="$gu:O16682046/*[position()&gt;1]"/></old><new><xsl:copy-of select="$gu:O16548590/*[position()&gt;1]"/></new><new-unfiltered><xsl:for-each select="key('gu:I41371475',$gu:O19890132,$new) [position()&gt;1]"><element name="{gu:I344762291(.,$gu:I689524583)}" gu:I17987597="{gu:I344762291(.,'DictionaryEntryName')}"/></xsl:for-each></new-unfiltered></ndrbad></xsl:if></xsl:if></xsl:for-each></xsl:variable><xsl:variable name="gu:I16417251" as="element(ABIE)*"><xsl:for-each-group select="$old//Row" group-starting-with="*[gu:I344762291(.,'ComponentType')='ABIE']"><ABIE name="{gu:I344762291(.,$gu:I689524583)}" gu:I17987597="{gu:I344762291(.,'DictionaryEntryName')}" class="{gu:I344762291(.,'ObjectClass')}"><xsl:for-each select="current-group()[position()&gt;1]"><xsl:if test="string(gu:I344762291(.,'ComponentType'))"><xsl:element name="{gu:I344762291(.,'ComponentType')}"><xsl:attribute name="name" select="gu:I344762291(.,$gu:I689524583)"/><xsl:attribute name="cardinality" select="gu:I344762291(.,'Cardinality')"/><xsl:attribute name="den" select="gu:I344762291(.,'DictionaryEntryName')"/><xsl:for-each select="gu:I344762291(.,'AssociatedObjectClass')"><xsl:attribute name="associatedObjectClass" select="."/></xsl:for-each></xsl:element></xsl:if></xsl:for-each></ABIE></xsl:for-each-group></xsl:variable><xsl:key name="gu:O16287982" match="ABIE" use="@name"/><xsl:variable name="gu:O16160732" as="element(ABIE)*"><xsl:for-each-group select="$new//Row" group-starting-with="*[gu:I344762291(.,'ComponentType')='ABIE']"><ABIE name="{gu:I344762291(.,$gu:I689524583)}" gu:I17987597="{gu:I344762291(.,'DictionaryEntryName')}" class="{gu:I344762291(.,'ObjectClass')}"><xsl:for-each select="current-group()[position()&gt;1]"><xsl:element name="{gu:I344762291(.,'ComponentType')}"><xsl:attribute name="name" select="gu:I344762291(.,$gu:I689524583)"/><xsl:attribute name="cardinality" select="gu:I344762291(.,'Cardinality')"/><xsl:attribute name="den" select="gu:I344762291(.,'DictionaryEntryName')"/><xsl:for-each select="gu:I344762291(.,'AssociatedObjectClass')"><xsl:attribute name="associatedObjectClass" select="."/></xsl:for-each></xsl:element></xsl:for-each></ABIE></xsl:for-each-group></xsl:variable><xsl:variable name="gu:I16035455" as="element(ABIE)*"><xsl:for-each select="$gu:O16160732/*"><xsl:variable name="gu:I15912105" select="$gu:I16417251/key('gu:O16287982',@name,$old)"/><xsl:if test="$gu:I15912105"><xsl:copy><xsl:copy-of select="@*"/><xsl:for-each select="*"><xsl:if test="starts-with(@cardinality,'1') or $gu:I15912105/*[@name=current()/@name]"><xsl:copy-of select="."/></xsl:if></xsl:for-each></xsl:copy></xsl:if></xsl:for-each></xsl:variable><xsl:variable name="gu:I15790639" as="element(ndrbad)*"><xsl:for-each select="$gu:I16417251/*"><xsl:variable name="gu:I15912105" select="."/><xsl:variable name="gu:I15671013" select="$gu:O16160732/key('gu:O16287982',@name,$new)"/><xsl:variable name="gu:O15553186" select="$gu:I16035455/key('gu:O16287982',@name,$new)"/><xsl:variable name="gu:I15437117" as="xsd:string?"><xsl:value-of><xsl:for-each select="*"><xsl:variable name="gu:O15322768" select="$gu:O15553186/*[@name=current()/@name]"/><xsl:if test="position() != count( $gu:O15322768/preceding-sibling::* )+1">
          bad position
        </xsl:if><xsl:if test="not( $gu:O15322768/@cardinality = $gu:O21774460[@old=current()/@cardinality]/allowed )">
          bad cardinality
        </xsl:if></xsl:for-each></xsl:value-of></xsl:variable><xsl:if test="$gu:I15437117"><ndrbad gu:I7865299="gu:I15790639"><xsl:copy-of select="$gu:I15912105,$gu:I15671013,$gu:O15553186"/></ndrbad></xsl:if></xsl:for-each></xsl:variable><xsl:variable name="gu:I15210101" as="element(SimpleValue)*" select="$gu:I89937989"/><xsl:variable name="gu:O15099078" as="element(ndrinfo)*"><xsl:for-each select="$gu:O86190572"><xsl:variable name="gu:I17987597" select="gu:I344762291(.,'DictionaryEntryName')"/><ndrinfo gu:O28730190="{gu:I344762291(.,'ObjectClass')}" gu:I17987597="{$gu:I17987597}" gu:I7865299="gu:O14989664" gu:I9112659="{empty(key('gu:I24625877',$gu:I17987597,$new))}"/></xsl:for-each></xsl:variable><xsl:variable name="gu:I14881825" as="element(ndrbad)*"><xsl:for-each select="$gu:O42215790 [gu:I344762291(.,'AssociatedObjectClass')=$gu:O79560528]"><ndrbad gu:I17987597="{gu:I344762291(.,'DictionaryEntryName')}" gu:I7865299="gu:O14775526"/></xsl:for-each></xsl:variable><xsl:variable name="gu:I14670735" as="element()*"><xsl:if test="$gu:O14567420"><ndrinfo gu:I38306921="(MOD03 error status ignored by invocation request)"/></xsl:if><xsl:for-each select="key('gu:I24053183','ABIE',$new) [gu:I344762291(.,'ModelName')=$gu:I517143437] [position()&gt;1]"><xsl:if test="preceding-sibling::Row[gu:I344762291(.,'ComponentType')='ABIE'][1]/ gu:I344762291(.,'ObjectClass') &gt; gu:I344762291(.,'ObjectClass')"><ndrbad gu:I17987597="{gu:I344762291(.,'DictionaryEntryName')}" gu:I7865299="gu:O14465550" gu:I38306921="{gu:I344762291(.,'ObjectClass')}"/></xsl:if></xsl:for-each></xsl:variable><xsl:variable name="gu:I14365095" as="element()*"><xsl:choose><xsl:when test="empty($xsd-maindoc-dir-uri)"><ndrinfo message="(no schema information provided for checking)"/></xsl:when><xsl:otherwise><ndrinfo message="(schema checking for this is not yet implemented)"/></xsl:otherwise></xsl:choose></xsl:variable><xsl:variable name="gu:I14266025" as="element()*" select="$gu:I2068573751/*/SimpleCodeList/Row/Value/*"/><xsl:variable name="gu:I14168313" as="element(ndrbad)*"><xsl:for-each select="$gu:I14266025/.."><xsl:if test="count(*)!=1 or count(*/*)&gt;0 or normalize-space(.)=''"><ndrbad gu:I17987597="{gu:I344762291(..,'DictionaryEntryName')}" gu:I7865299="gu:O14071930" gu:I9072691="{../@ColumnRef}"/></xsl:if></xsl:for-each></xsl:variable><xsl:variable name="gu:I13976849" as="element(ndrbad)*"><xsl:for-each select="$gu:I14266025"><xsl:if test="matches(.,'([&lt;&gt;&amp;\r\t]|--|\n[^$])','s')"><ndrbad gu:I17987597="{gu:I344762291(../..,'DictionaryEntryName')}" gu:I7865299="gu:I13883045" gu:I9072691="{../@ColumnRef}" gu:I21107895="{.}"/></xsl:if></xsl:for-each></xsl:variable><xsl:variable name="gu:I13790491" as="xsd:string*" select="'ObjectClassQualifier', 'ObjectClass', 'AssociatedObjectClassQualifier', 'AssociatedObjectClass', 'PropertyTermQualifier', 'PropertyTermPossessiveNoun', 'PropertyTermPrimaryNoun', 'RepresentationTerm', 'DataTypeQualifier'"/><xsl:variable name="gu:I13699163" as="attribute()*" select="$config/*/ndr/name-abbreviations/abbreviation/@short"/><xsl:variable name="gu:I13609037" as="attribute()*" select="$config/*/ndr/den-abbreviations/abbreviation/@short"/><xsl:variable name="gu:I13520089" as="element(ndrbad)*"><xsl:for-each select="$gu:I14266025[../@ColumnRef=$gu:I689524583]"><xsl:variable name="gu:I21107895" select="."/><xsl:for-each select="tokenize(replace( replace( replace(.,'(\d)([^\d])','$1 $2'), '([A-Z][A-Z])([A-Z][a-z])','$1 $2'), '([a-z])([A-Z])','$1 $2'), '[^\w\d]+')"><xsl:if test="matches(.,'([A-Z][A-Z])|([a-zA-Z]\d)|(\d[a-zA-Z])') and not(. = $gu:I13699163)"><ndrbad gu:I17987597="{gu:I344762291($gu:I21107895/../..,'DictionaryEntryName')}" gu:I7865299="gu:I13432297" gu:O21325502="{.}" gu:I9072691="{$gu:I21107895/../@ColumnRef}" gu:I21107895="{$gu:I21107895}"/></xsl:if></xsl:for-each></xsl:for-each></xsl:variable><xsl:variable name="gu:I13345637" as="element(ndrbad)*"><xsl:for-each select="$gu:I14266025[../@ColumnRef=$gu:I13790491]"><xsl:variable name="gu:I21107895" select="."/><xsl:for-each select="tokenize(replace( replace( replace(.,'(\d)([^\d])','$1 $2'), '([A-Z][A-Z])([A-Z][a-z])','$1 $2'), '([a-z])([A-Z])','$1 $2'), '[^\w\d]+')"><xsl:if test="matches(.,'([A-Z][A-Z])|([a-zA-Z]\d)|(\d[a-zA-Z])') and not(. = $gu:I13609037)"><ndrbad gu:I17987597="{gu:I344762291($gu:I21107895/../..,'DictionaryEntryName')}" gu:I7865299="gu:O13260088" gu:O21325502="{.}" gu:I9072691="{$gu:I21107895/../@ColumnRef}" gu:I21107895="{$gu:I21107895}"/></xsl:if></xsl:for-each></xsl:for-each></xsl:variable><xsl:variable name="gu:O13175628" as="element(ndrbad)*"><xsl:for-each select="$gu:I2068573751/*/*/Row [not(gu:I344762291(.,'ComponentType')=('ABIE','BBIE','ASBIE'))]"><ndrbad gu:I17987597="{gu:I344762291(.,'DictionaryEntryName')}" gu:I7865299="gu:O14775526" gu:I9402607="{gu:I344762291(.,'ComponentType')}"/></xsl:for-each></xsl:variable><xsl:variable name="gu:O13092238" as="element(ndrbad)*"><xsl:for-each select="key('gu:I24053183','ABIE',$new)"><xsl:sort select="gu:I344762291(.,'DictionaryEntryName')"/><xsl:variable name="gu:I17987597" select="gu:I344762291(.,'DictionaryEntryName')"/><xsl:variable name="gu:I13009897" select="gu:I344762291(.,$gu:I689524583)"/><xsl:variable name="gu:I12928585" select="gu:I344762291(.,'ObjectClassQualifier')"/><xsl:variable name="gu:O12848284" select="gu:I344762291(.,'ObjectClass')"/><xsl:variable name="gu:I17987597" select="if( $gu:I17987597 ) then $gu:I17987597 else if( $gu:I13009897 ) then $gu:I13009897 else '(no DEN or name)'"/><xsl:if test="normalize-space(gu:I344762291(.,'Definition'))=''"><ndrbad gu:I17987597="{$gu:I17987597}" gu:I9072691="Definition" gu:I21107895="(empty)" gu:I7865299="gu:I12768973"/></xsl:if><xsl:if test="normalize-space($gu:O12848284)=''"><ndrbad gu:I17987597="{$gu:I17987597}" gu:I9072691="ObjectClass" gu:I21107895="(empty)" gu:I7865299="gu:I12768973"/></xsl:if><xsl:variable name="gu:O12690636" select="concat(gu:O21325502($gu:I12928585),gu:O21325502($gu:O12848284))"/><xsl:if test="not( $gu:I13009897 = $gu:O12690636)"><ndrbad gu:I17987597="{$gu:I17987597}" gu:I7865299="gu:I12768973" gu:I9072691="{$gu:I13009897/../@ColumnRef}" gu:I21107895="{($gu:I13009897,'(empty)')[1]}" gu:O9445542="{$gu:O12690636}"/></xsl:if><xsl:variable name="gu:O12613254" select="concat( if( $gu:I12928585 ) then concat($gu:I12928585,'_ ') else '',$gu:O12848284,'. Details')"/><xsl:if test="not( $gu:I17987597 = $gu:O12613254 )"><ndrbad gu:I17987597="{$gu:I17987597}" gu:I9072691="DictionaryEntryName" gu:I7865299="gu:I12768973" gu:I21107895="{$gu:I17987597}" gu:O9445542="{$gu:O12613254}"/></xsl:if></xsl:for-each></xsl:variable><xsl:variable name="gu:O12536810" as="element(ndrbad)*"><xsl:for-each select="key('gu:I24053183','BBIE',$new)"><xsl:sort select="gu:I344762291(.,'DictionaryEntryName')"/><xsl:variable name="gu:I13009897" select="gu:I344762291(.,$gu:I689524583)"/><xsl:variable name="gu:I12461287" select="gu:I344762291(.,'Cardinality')"/><xsl:variable name="gu:I17987597" select="gu:I344762291(.,'DictionaryEntryName')"/><xsl:variable name="gu:I12928585" select="gu:I344762291(.,'ObjectClassQualifier')"/><xsl:variable name="gu:O12848284" select="gu:I344762291(.,'ObjectClass')"/><xsl:variable name="gu:I12386669" select="gu:I344762291(.,'PropertyTermQualifier')"/><xsl:variable name="gu:O12312938" select="gu:I344762291(.,'PropertyTermPossessiveNoun')"/><xsl:variable name="gu:I20685737" select="gu:I344762291(.,'PropertyTermPrimaryNoun')"/><xsl:variable name="gu:I12240081" select="gu:I344762291(.,'PropertyTerm')"/><xsl:variable name="gu:O12168080" select="gu:I344762291(.,'DataType')"/><xsl:variable name="gu:O20480928" select="gu:I344762291(.,'RepresentationTerm')"/><xsl:variable name="gu:O12096922" select="gu:I344762291(.,'DataTypeQualifier')"/><xsl:variable name="gu:I17987597" select="if( $gu:I17987597 ) then $gu:I17987597 else if( $gu:I13009897 ) then $gu:I13009897 else '(no DEN or name)'"/><xsl:if test="not( $gu:I12461287=('0..1','1','0..n','1..n') )"><ndrbad gu:I17987597="{$gu:I17987597}" gu:I9072691="Cardinality" gu:I21107895="&#34;{$gu:I12461287}&#34;" gu:I7865299="gu:I12026591"/></xsl:if><xsl:if test="normalize-space(gu:I344762291(.,'Definition'))=''"><ndrbad gu:I17987597="{$gu:I17987597}" gu:I9072691="Definition" gu:I21107895="(empty)" gu:I7865299="gu:I12026591"/></xsl:if><xsl:if test="normalize-space($gu:O12848284)=''"><ndrbad gu:I17987597="{$gu:I17987597}" gu:I9072691="ObjectClass" gu:I21107895="(empty)" gu:I7865299="gu:I12026591"/></xsl:if><xsl:if test="normalize-space($gu:I20685737)=''"><ndrbad gu:I17987597="{$gu:I17987597}" gu:I9072691="PropertyTermPrimaryNoun" gu:I21107895="(empty)" gu:I7865299="gu:I12026591"/></xsl:if><xsl:variable name="gu:I11957073" select="concat( $gu:O12312938, if( $gu:O12312938 ) then ' ' else '', $gu:I20685737 )"/><xsl:if test="not( $gu:I12240081 = $gu:I11957073 )"><ndrbad gu:I17987597="{$gu:I17987597}" gu:I9072691="PropertyTerm" gu:I7865299="gu:I12026591" gu:I21107895="{$gu:I12240081}" gu:O9445542="{$gu:I11957073}"/></xsl:if><xsl:if test="not( $gu:O20480928 = $config/*/ndr/types/type )"><ndrbad gu:I17987597="{$gu:I17987597}" gu:I9072691="RepresentationTerm" gu:I7865299="gu:I12026591" gu:I21107895="{$gu:O20480928}"/></xsl:if><xsl:variable name="gu:O12690636" select="concat(gu:O21325502($gu:I12386669), gu:O21325502($gu:O12312938), if( $gu:I20685737!='Text' or ( not($gu:I12386669) and not($gu:O12312938) ) ) then gu:O21325502($gu:I20685737) else '', if( $gu:O20480928!='Text' and not(gu:O20280134($gu:I20685737,$gu:O20480928))) then gu:O21325502($gu:O20480928) else '' )"/><xsl:if test="not( $gu:I13009897 = $gu:O12690636)"><ndrbad gu:I17987597="{$gu:I17987597}" gu:I7865299="gu:I12026591" gu:I9072691="{$gu:I13009897/../@ColumnRef}" gu:I21107895="{($gu:I13009897,'(empty)')[1]}" gu:O9445542="{$gu:O12690636}"/></xsl:if><xsl:variable name="gu:O12613254" select="concat ( $gu:I12928585, if( $gu:I12928585 ) then '_ ' else '',$gu:O12848284,'. ', $gu:I12386669, if( $gu:I12386669 ) then '_ ' else '',$gu:I12240081, if( $gu:I12386669 or ( $gu:I12240081 != $gu:O20480928 ) ) then concat( '. ',$gu:O20480928) else '' )"/><xsl:if test="not( $gu:I17987597 = $gu:O12613254 )"><ndrbad gu:I17987597="{$gu:I17987597}" gu:I9072691="DictionaryEntryName" gu:I7865299="gu:I12026591" gu:I21107895="{$gu:I17987597}" gu:O9445542="{$gu:O12613254}"/></xsl:if><xsl:variable name="gu:O11888354" select="concat ( $gu:O12096922, if( $gu:O12096922 ) then '_ ' else '', $gu:O20480928, '. Type' )"/><xsl:if test="not( $gu:O12168080 = $gu:O11888354 )"><ndrbad gu:I17987597="{$gu:I17987597}" gu:I9072691="DataType" gu:I7865299="gu:I12026591" gu:I21107895="{$gu:O12168080}" gu:O9445542="{$gu:O11888354}"/></xsl:if></xsl:for-each></xsl:variable><xsl:variable name="gu:I11820421" as="element(ndrbad)*"><xsl:for-each select="key('gu:I24053183','ASBIE',$new)[gu:O44968994(.)]"><xsl:sort select="gu:I344762291(.,'DictionaryEntryName')"/><xsl:variable name="gu:I13009897" select="gu:I344762291(.,$gu:I689524583)"/><xsl:variable name="gu:I12461287" select="gu:I344762291(.,'Cardinality')"/><xsl:variable name="gu:I17987597" select="gu:I344762291(.,'DictionaryEntryName')"/><xsl:variable name="gu:I12928585" select="gu:I344762291(.,'ObjectClassQualifier')"/><xsl:variable name="gu:O12848284" select="gu:I344762291(.,'ObjectClass')"/><xsl:variable name="gu:I11753259" select="gu:I344762291(.,'AssociatedObjectClassQualifier')"/><xsl:variable name="gu:I11686857" select="gu:I344762291(.,'AssociatedObjectClass')"/><xsl:variable name="gu:I12386669" select="gu:I344762291(.,'PropertyTermQualifier')"/><xsl:variable name="gu:O12312938" select="gu:I344762291(.,'PropertyTermPossessiveNoun')"/><xsl:variable name="gu:I20685737" select="gu:I344762291(.,'PropertyTermPrimaryNoun')"/><xsl:variable name="gu:I12240081" select="gu:I344762291(.,'PropertyTerm')"/><xsl:variable name="gu:O12168080" select="gu:I344762291(.,'DataType')"/><xsl:variable name="gu:O20480928" select="gu:I344762291(.,'RepresentationTerm')"/><xsl:variable name="gu:O12096922" select="gu:I344762291(.,'DataTypeQualifier')"/><xsl:variable name="gu:I17987597" select="if( $gu:I17987597 ) then $gu:I17987597 else if( $gu:I13009897 ) then $gu:I13009897 else '(no DEN or name)'"/><xsl:if test="not( $gu:I12461287=('0..1','1','0..n','1..n') )"><ndrbad gu:I17987597="{$gu:I17987597}" gu:I9072691="Cardinality" gu:I21107895="&#34;{$gu:I12461287}&#34;" gu:I7865299="gu:O11621200"/></xsl:if><xsl:if test="normalize-space(gu:I344762291(.,'Definition'))=''"><ndrbad gu:I17987597="{$gu:I17987597}" gu:I9072691="Definition" gu:I21107895="(empty)" gu:I7865299="gu:O11621200"/></xsl:if><xsl:if test="normalize-space($gu:O12848284)=''"><ndrbad gu:I17987597="{$gu:I17987597}" gu:I9072691="ObjectClass" gu:I21107895="(empty)" gu:I7865299="gu:O11621200"/></xsl:if><xsl:if test="normalize-space($gu:I11686857)=''"><ndrbad gu:I17987597="{$gu:I17987597}" gu:I9072691="AssociatedObjectClass" gu:I7865299="gu:O11621200" gu:I21107895="(empty)"/></xsl:if><xsl:if test="not( ( $new/key('gu:I41371475',$gu:I11686857,.), $base/key('gu:I41371475',$gu:I11686857,.) ) [string(gu:I344762291(.,'ObjectClassQualifier')) = string($gu:I11753259)] [ if( not( $gu:O53040352 ) ) then true() else ( some $gu:O36938816 in key('gu:I41371475',$gu:I11686857) satisfies not( gu:I44012207($gu:O36938816) ) ) ] )"><ndrbad gu:I17987597="{$gu:I17987597}" gu:I9072691="AssociatedObjectClass" gu:I7865299="gu:O11621200" gu:O137904916=" (missing ABIE)" gu:I21107895="{concat( $gu:I11753259, if( $gu:I11753259 ) then '_ ' else '', $gu:I11686857)}"/></xsl:if><xsl:variable name="gu:I11957073" select="concat( $gu:I11753259, if( $gu:I11753259 ) then '_ ' else '', $gu:I11686857)"/><xsl:if test="not( $gu:I12240081 = $gu:I11957073 )"><ndrbad gu:I17987597="{$gu:I17987597}" gu:I9072691="PropertyTerm" gu:I7865299="gu:O11621200" gu:I21107895="{$gu:I12240081}" gu:O9445542="{$gu:I11957073}"/></xsl:if><xsl:variable name="gu:O12690636" select="concat(gu:O21325502($gu:I12386669),gu:O21325502($gu:I12240081))"/><xsl:if test="not( $gu:I13009897 = $gu:O12690636)"><ndrbad gu:I17987597="{$gu:I17987597}" gu:I7865299="gu:O11621200" gu:I9072691="{$gu:I13009897/../@ColumnRef}" gu:I21107895="{($gu:I13009897,'(empty)')[1]}" gu:O9445542="{$gu:O12690636}"/></xsl:if><xsl:variable name="gu:O12613254" select="concat( $gu:I12928585, if( $gu:I12928585 ) then '_ ' else '',$gu:O12848284,'. ', $gu:I12386669, if( $gu:I12386669 ) then '_ ' else '',$gu:I12240081, if( $gu:I12386669 ) then concat( '. ',$gu:O20480928) else '' )"/><xsl:if test="not( $gu:I17987597 = $gu:O12613254 )"><ndrbad gu:I17987597="{$gu:I17987597}" gu:I9072691="DictionaryEntryName" gu:I7865299="gu:O11621200" gu:I21107895="{$gu:I17987597}" gu:O9445542="{$gu:O12613254}"/></xsl:if><xsl:variable name="gu:I11556277" select="$gu:I12240081"/><xsl:if test="not( $gu:O20480928 = $gu:I11556277 )"><ndrbad gu:I17987597="{$gu:I17987597}" gu:I9072691="DataType" gu:I7865299="gu:O11621200" gu:I21107895="{$gu:O20480928}" gu:O9445542="{$gu:I11556277}"/></xsl:if></xsl:for-each></xsl:variable><xsl:variable name="gu:O11492076" as="element(ndrbad)*"><xsl:for-each-group select="$gu:O43095286" group-by="gu:I344762291(.,'DictionaryEntryName')"><xsl:if test="count(current-group())&gt;1"><ndrbad gu:I17987597="{current-grouping-key()}" gu:I7865299="gu:O11428584" gu:O413714750="{distinct-values(current-group()/gu:I344762291(.,'ModelName'))}" gu:I21107895="{.}"/></xsl:if></xsl:for-each-group></xsl:variable><xsl:variable name="gu:I11365789" as="element(ndrbad)*"><xsl:for-each select="$gu:I14266025[../@ColumnRef=$gu:I13790491]"><xsl:if test="contains(.,'.') or contains(.,'_') or normalize-space(.) != ."><ndrbad gu:I17987597="{gu:I344762291(../..,'DictionaryEntryName')}" gu:I7865299="gu:I11303681" gu:I9072691="{../@ColumnRef}" gu:I21107895="{.}"/></xsl:if></xsl:for-each></xsl:variable><xsl:variable name="gu:O11242248" as="element(ndrbad)*"><xsl:for-each select="$gu:I14266025[../@ColumnRef=$gu:I13790491]"><xsl:variable name="gu:I21107895" select="."/><xsl:for-each select="tokenize(.,'[^\w\d]+')"><xsl:if test="( upper-case(substring(.,1,1))!=substring(.,1,1) or lower-case(substring(.,2))!=substring(.,2) ) and not(. = $gu:I13699163)"><ndrbad gu:I17987597="{gu:I344762291($gu:I21107895/../..,'DictionaryEntryName')}" gu:I7865299="gu:I11181479" gu:I9072691="{$gu:I21107895/../@ColumnRef}" gu:I21107895="{$gu:I21107895}"/></xsl:if></xsl:for-each></xsl:for-each></xsl:variable><xsl:variable name="gu:O11121364" as="element(ndrbad)*"><xsl:for-each select="($gu:O86190572,$gu:I47013039) [gu:I49251755(.)]"><xsl:sort select="gu:I344762291(.,'DictionaryEntryName')"/><xsl:variable name="gu:I38306921" select="gu:I344762291(.,'ObjectClass')"/><xsl:variable name="gu:I11061891" select="key('gu:I41371475',$gu:I38306921,$new) [gu:O44968994(.)]"/><xsl:variable name="gu:I11003051" select="key('gu:O26520176',$gu:I38306921)[gu:O44968994(.)]"/><xsl:if test="count($gu:I11003051)&gt;0 and count($gu:I11061891)=0"><ndrbad gu:I38306921="{$gu:I38306921}" gu:I7865299="gu:O10944834" gu:O8993798="{string-join($gu:I11003051/gu:I344762291(.,'DictionaryEntryName')/string(),', ')}"/></xsl:if></xsl:for-each></xsl:variable><xsl:variable name="gu:O10887230" as="element(ndrbad)*"><xsl:for-each select="$gu:O86190572,$gu:I47013039"><xsl:sort select="gu:I344762291(.,'ObjectClass')"/><xsl:variable name="gu:I38306921" select="gu:I344762291(.,'ObjectClass')"/><xsl:variable name="gu:I10830229" select="key('gu:I41371475',$gu:I38306921,$new) [gu:O44968994(.)]"/><xsl:variable name="gu:I11061891" select="key('gu:I23506519',$gu:I38306921,$new) [gu:O44968994(.)]"/><xsl:variable name="gu:I10773821" select="$gu:I11061891[gu:I344762291(.,'ComponentType')='ASBIE'][1]"/><xsl:variable name="gu:O10717998" select="$gu:I11061891[gu:I344762291(.,'ComponentType')='BBIE'][last()]"/><xsl:if test="$gu:O10717998 &gt;&gt; $gu:I10773821"><ndrbad gu:O48106366="{$gu:I38306921}" gu:I7865299="gu:I10662751"/></xsl:if><xsl:if test="count($gu:I11061891) != count($gu:I10830229)"><ndrbad gu:O48106366="{$gu:I38306921}" gu:I7865299="gu:I10662751" gu:O8954864="{string-join(( $gu:I11061891[not(some $gu:O36938816 in $gu:I10830229                                               satisfies $gu:O36938816 is .)],                                  $gu:I10830229[not(some $gu:O36938816 in $gu:I11061891                                                     satisfies $gu:O36938816 is .)] )/                                  gu:I344762291(.,'DictionaryEntryName'),', ')}"/></xsl:if></xsl:for-each></xsl:variable><xsl:variable name="gu:O10608070" as="element(ndrbad)*"><xsl:for-each select="$new//Row[gu:I344762291(.,'ObjectClassQualifier')]"><ndrbad gu:I17987597="{gu:I344762291(.,'DictionaryEntryName')}" gu:I38306921="{gu:I344762291(.,'ObjectClass')}" gu:I7865299="gu:O10608070"/></xsl:for-each></xsl:variable><xsl:variable name="gu:I10553947" as="element(ndrbad)*"><xsl:for-each select="$new//Row [gu:I344762291(.,'AssociatedObjectClassQualifier')] [gu:O44968994(.)]"><ndrbad gu:I17987597="{gu:I344762291(.,'DictionaryEntryName')}" gu:I7865299="gu:I10553947"/></xsl:for-each></xsl:variable><xsl:variable name="gu:O10500374" as="element()*"><xsl:choose><xsl:when test="$gu:O53040352"><ndrinfo message="(orphans are not checked when creating a subset)"/></xsl:when><xsl:otherwise><xsl:for-each select="$gu:I36290767[some $gu:O36938816 in key('gu:I41371475',gu:I344762291(.,'ObjectClass')) satisfies not(gu:I44012207($gu:O36938816))]"><xsl:sort select="gu:I344762291(.,'DictionaryEntryName')"/><xsl:if test="not(key('gu:O26520176', gu:I344762291(.,'ObjectClass'))[gu:O44968994(.)])"><ndrbad gu:I17987597="{gu:I344762291(.,'DictionaryEntryName')}" gu:I38306921="{gu:I344762291(.,'ObjectClass')}" gu:I7865299="gu:O10447342"/></xsl:if></xsl:for-each></xsl:otherwise></xsl:choose></xsl:variable><xsl:variable name="gu:O10394842" as="element(property-term)*" select="if( $config ) then $config/*/ndr/expected-maindoc-BIEs/property-term else ()"/><xsl:variable name="gu:O10342868" as="element(ndrbad)*"><xsl:if test="$gu:O10394842"><xsl:for-each select="$gu:O79560528"><xsl:variable name="gu:I10291411" select="key('gu:I41371475',.)"/><xsl:variable name="gu:O10240464" select="."/><xsl:for-each select="$gu:O10394842 [not($gu:I10291411/gu:I344762291(.,'PropertyTerm')=.)]"><ndrbad gu:doctype="{$gu:O10240464}" gu:I17987597="{$gu:O10240464}. Details" gu:reason="absent" gu:I7865299="gu:O10342868" gu:I9532597="{.}" gu:O9445542="{.}"/></xsl:for-each><xsl:for-each select="$gu:I10291411 [gu:I344762291(.,'PropertyTerm')=$gu:O10394842]"><xsl:variable name="gu:O10190018" select="."/><xsl:if test="gu:I344762291(.,'ComponentType')!= $gu:O10394842[.=gu:I344762291(current(),'PropertyTerm')]/ @type"><ndrbad gu:doctype="{$gu:O10240464}" gu:I7865299="gu:O10342868" gu:I17987597="{gu:I344762291(.,'DictionaryEntryName')}" gu:I9532597="{gu:I344762291(.,'PropertyTerm')}" gu:I9402607="{gu:I344762291(.,'ComponentType')}" gu:O9445542="{$gu:O10394842                        [.=gu:I344762291(current(),'PropertyTerm')]/@type}"/></xsl:if><xsl:if test="gu:I344762291(.,'Cardinality')!= $gu:O10394842[.=gu:I344762291(current(),'PropertyTerm')]/ @cardinality"><ndrbad gu:doctype="{$gu:O10240464}" gu:I7865299="gu:O10342868" gu:I17987597="{gu:I344762291(.,'DictionaryEntryName')}" gu:I9532597="{gu:I344762291(.,'PropertyTerm')}" gu:O9488870="{gu:I344762291(.,'Cardinality')}" gu:O9445542="{$gu:O10394842                        [.=gu:I344762291(current(),'PropertyTerm')]/@cardinality}"/></xsl:if><xsl:variable name="gu:O31342026" select="count($gu:I10291411[. &lt;&lt; $gu:O10190018]) + 1"/><xsl:if test="$gu:O31342026 != $gu:O10394842[.=gu:I344762291(current(),'PropertyTerm')]/ @order"><ndrbad gu:doctype="{$gu:O10240464}" gu:I7865299="gu:O10342868" gu:I17987597="{gu:I344762291(.,'DictionaryEntryName')}" gu:I9532597="{gu:I344762291(.,'PropertyTerm')}" gu:O31342026="{$gu:O31342026}" gu:O9445542="{$gu:O10394842                        [.=gu:I344762291(current(),'PropertyTerm')]/@order}"/></xsl:if></xsl:for-each></xsl:for-each></xsl:if></xsl:variable><xsl:variable name="gu:I10140067" as="element(ndrinfo)*"><xsl:for-each select="$gu:O39780264"><xsl:sort select="gu:I344762291(.,'DictionaryEntryName')"/><xsl:variable name="gu:I10090603" select="gu:I344762291(.,'PropertyTermPrimaryNoun')"/><xsl:variable name="gu:O10041620" select="gu:I344762291(.,'RepresentationTerm')"/><xsl:if test="$gu:O10041620 != 'Text' and $gu:I10090603 != $gu:O10041620 and not(some $gu:I9993109 in $gu:O20894684 satisfies ($gu:O10041620=$gu:I9993109/representation-term and $gu:I10090603=$gu:I9993109/primary-noun))"><ndrinfo gu:I17987597="{gu:I344762291(.,'DictionaryEntryName')}" gu:I10090603="{$gu:I10090603}" gu:O10041620="{$gu:O10041620}"/></xsl:if></xsl:for-each></xsl:variable><xsl:variable name="gu:O9945066" as="element(ndrinfo)*"><xsl:for-each select="$gu:O39780264"><xsl:sort select="gu:I344762291(.,'DictionaryEntryName')"/><xsl:variable name="gu:I10090603" select="gu:I344762291(.,'PropertyTermPrimaryNoun')"/><xsl:variable name="gu:O10041620" select="gu:I344762291(.,'RepresentationTerm')"/><xsl:if test="$gu:O10041620 = 'Text' and $gu:I10090603 = $gu:O10041620"><ndrinfo gu:I17987597="{gu:I344762291(.,'DictionaryEntryName')}" gu:I10090603="{$gu:I10090603}"/></xsl:if></xsl:for-each></xsl:variable><xsl:variable name="gu:O9897482" as="element(ndrinfo)*"><xsl:for-each-group select="$gu:O39780264" group-by="gu:I344762291(.,$gu:I689524583)"><xsl:sort select="gu:I344762291(.,$gu:I689524583)"/><xsl:if test="count(current-group())&gt;1"><ndrinfo gu:I13009897="{gu:I344762291(.,$gu:I689524583)}" gu:count="{count(current-group())}" gu:dens="{string-join(             current-group()/gu:I344762291(.,'DictionaryEntryName')/string(.),', ')}"/></xsl:if></xsl:for-each-group></xsl:variable><xsl:function name="gu:I9850351" as="node()*"><xsl:param name="gu:I9850351" as="item()+"/><xsl:param name="gu:I9803667" as="element()*"/><xsl:param name="gu:I9757423" as="xsd:string"/><xsl:text>
</xsl:text><span><xsl:for-each select="$gu:I9757423"><xsl:attribute name="title" select="normalize-space(.)"/></xsl:for-each><span><xsl:if test="count($gu:I9803667[self::ndrbad])&gt;0"><xsl:attribute name="style">color:red;</xsl:attribute></xsl:if><xsl:value-of select="concat($gu:I9850351,': ', for $gu:I9711613 in count($gu:I9803667[self::ndrbad]) return if( $gu:I9711613 &gt; 0 ) then $gu:I9711613 else count($gu:I9803667[self::ndrinfo]))"/></span></span><xsl:text>
</xsl:text><xsl:for-each select="$gu:I9803667[self::ndrinfo][@message]"><xsl:value-of select="@message"/><xsl:text>
</xsl:text></xsl:for-each></xsl:function><xsl:function name="gu:O9666232" as="node()*"><xsl:param name="gu:O9666232" as="element()"/><xsl:param name="gu:I9757423" as="item()+"/><a name="{generate-id($gu:O9666232)}"><xsl:value-of select="$gu:I9757423"/><xsl:text>
</xsl:text></a></xsl:function><xsl:template name="gu:I9621273"><xsl:if test="not($old is $new)"><h3>Non-fatal backward compatibility observations</h3><pre><xsl:copy-of select="gu:I9850351('Renamed old DENs in new model',$gu:O20083240, 'Renaming an old DEN with a new value does not impact conformance, as the schema constraints do not change. However, the DEN is meant to be persistent and should only change if it is necessary to correct it. For example, it might have been used as a key for documentation. Accordingly, one should consider preserving old DEN values in such uses, along with the new DEN values, so that old links continue to work.' )"/><xsl:for-each select="$gu:O20083240"><xsl:sort select="@gu:I17987597"/><xsl:copy-of select="gu:O9666232(.,concat(@gu:I17987597,': ',@gu:O9576730))"/></xsl:for-each><xsl:copy-of select="gu:I9850351('Missing old Data Type Qualifications in new model',$gu:O19153460, 'It is not fatal to deem an element to change or no longer to have a data type qualification in a newer model, but it is reported here in case it was an oversight.' )"/><xsl:for-each select="$gu:O19153460"><xsl:sort select="@name"/><xsl:copy-of select="gu:O9666232(.,(concat(@gu:I17987597,':'), concat('old=&#34;',@old,'&#34; new=&#34;', @new,'&#34;')))"/></xsl:for-each><xsl:copy-of select="gu:I9850351('Added Data Type Qualifications in new model',$gu:O18469408, 'It is not fatal to have new data type qualifications. Such are listed here to help with integrity checking by reviewing important changes to the model.')"/><xsl:for-each select="$gu:O18469408"><xsl:sort select="@name"/><xsl:copy-of select="gu:O9666232(.,(concat(@gu:I17987597,':'), concat('&#34;',@new,'&#34;')))"/></xsl:for-each></pre><h3>Fatal backward compatibility issues</h3><pre><xsl:copy-of select="gu:I9850351('Cardinalities found in error',$gu:I18145383, 'When changing the cardinality of an old item in a new model, the minimum can be dropped (but not raised) and the maximum can be raised (but not dropped).')"/><xsl:for-each select="$gu:I18145383"><xsl:sort select="@gu:I17987597"/><xsl:copy-of select="gu:O9666232(.,(concat('&#34;',@gu:I17987597,'&#34;'), 'old=',@old,'new=',@new))"/></xsl:for-each><xsl:copy-of select="gu:I9850351('Sequences found in error (by DEN)',$gu:O16955522, 'All items in the old model must be in the same order in the new model.')"/><xsl:for-each select="$gu:O16955522"><xsl:sort select="@class"/><xsl:copy-of select="gu:O9666232(.,concat('&#34;',@class,'&#34;'))"/><xsl:text>  Old order:
</xsl:text><xsl:for-each select="old/*"><xsl:text>  </xsl:text><xsl:choose><xsl:when test="count(preceding-sibling::*)!= count(../../new/*[@name=current()/@name]/ preceding-sibling::*)">*</xsl:when><xsl:otherwise><xsl:text> </xsl:text></xsl:otherwise></xsl:choose><xsl:value-of select="position(),@name"/><xsl:text>
</xsl:text></xsl:for-each><xsl:text>
  New order (not including newly-introduced optional constructs):
</xsl:text><xsl:for-each select="new/*"><xsl:text>  </xsl:text><xsl:choose><xsl:when test="count(preceding-sibling::*)!= count(../../old/*[@name=current()/@name]/ preceding-sibling::*)">*</xsl:when><xsl:otherwise><xsl:text> </xsl:text></xsl:otherwise></xsl:choose><xsl:value-of select="position(),@name"/><xsl:text>
</xsl:text></xsl:for-each><xsl:text>
  New order (all constructs):
</xsl:text><xsl:for-each select="new-unfiltered/*"><xsl:text>  </xsl:text><xsl:choose><xsl:when test="count(preceding-sibling::*)!= count(../../old/*[@name=current()/@name]/ preceding-sibling::*)">*</xsl:when><xsl:otherwise><xsl:text> </xsl:text></xsl:otherwise></xsl:choose><xsl:value-of select="position(),@name"/><xsl:text>
</xsl:text></xsl:for-each></xsl:for-each></pre></xsl:if><h3>Non-fatal issues but not allowed by these checks</h3><pre><xsl:copy-of select="gu:I9850351('Qualified ABIEs',$gu:O10608070, 'In these checks there are no qualifications on ABIEs' )"/><xsl:for-each select="$gu:O10608070"><xsl:sort select="@name"/><xsl:copy-of select="gu:O9666232(.,concat('&#34;',@gu:I17987597,'&#34;'))"/></xsl:for-each><xsl:copy-of select="gu:I9850351('ASBIEs referring to qualified ABIEs',$gu:I10553947, 'In these checks there are no qualifications on ABIEs' )"/><xsl:for-each select="$gu:I10553947"><xsl:sort select="@name"/><xsl:copy-of select="gu:O9666232(.,concat('&#34;',@gu:I17987597,'&#34;'))"/></xsl:for-each><xsl:copy-of select="gu:I9850351('Orphaned ABIEs not being referenced by an ASBIE', $gu:O10500374, 'Unused library ABIEs are not an error, but having them is suspicious.')"/><xsl:for-each select="$gu:O10500374[self::ndrbad]"><xsl:sort select="@name"/><xsl:copy-of select="gu:O9666232(.,concat('&#34;',@gu:I38306921,'&#34;'))"/></xsl:for-each><xsl:copy-of select="gu:I9850351( 'Missing expected BIEs in Document ABIE',$gu:O10342868, 'The configuration file indicates the need for certain property terms in all Document ABIEs')"/><xsl:for-each select="$gu:O10342868"><xsl:sort select="@doctype"/><xsl:copy-of select="gu:O9666232(.,concat(@gu:I17987597,': ',@gu:I9532597, if( @gu:O9488870 ) then concat(' (expected cardinality ''',@gu:O9445542, ''', found cardinality ''',@gu:O9488870,''')') else if( @gu:I9402607 ) then concat(' (expected type ''',@gu:O9445542, ''', found type ''',@gu:I9402607,''')') else if( @gu:O31342026 ) then concat(' (expected position ''',@gu:O9445542, ''', found position ''',@gu:O31342026,''')') else ' (missing)'))"/></xsl:for-each></pre></xsl:template><xsl:function name="gu:I9317899" as="node()*"><xsl:param name="gu:O9360062" as="xsd:string"/><a target="_blank" href="http://docs.oasis-open.org/ubl/Business-Document-NDR/v1.0/Business-Document-NDR-v1.0.html#{      $gu:O9360062}"><xsl:value-of select="$gu:O9360062"/></a></xsl:function><xsl:function name="gu:I9276115" as="node()*"><xsl:param name="gu:O9360062" as="xsd:string"/><a target="_blank" href="http://docs.oasis-open.org/ubl/UBL-NDR/v3.0/UBL-NDR-v3.0.html#{      $gu:O9360062}"><xsl:value-of select="$gu:O9360062"/></a></xsl:function><xsl:function name="gu:O9234704" as="node()*"><xsl:param name="gu:I9850351" as="item()+"/><xsl:param name="gu:I9803667" as="element()*"/><xsl:param name="gu:I9757423" as="xsd:string"/><xsl:text>
</xsl:text><span><xsl:if test="exists($gu:I9803667[self::ndrbad])"><xsl:attribute name="style">color:red</xsl:attribute></xsl:if><xsl:for-each select="$gu:I9757423"><xsl:attribute name="title" select="normalize-space(.)"/></xsl:for-each><xsl:copy-of select="gu:I9317899(substring-before($gu:I9850351,' '))"/><xsl:value-of select="concat(substring($gu:I9850351,6),': ', count(if( $gu:I9803667[self::ndrbad] ) then $gu:I9803667[self::ndrbad] else $gu:I9803667))"/></span><xsl:text>
</xsl:text></xsl:function><xsl:function name="gu:I9193661" as="node()*"><xsl:param name="gu:I9850351" as="item()+"/><xsl:param name="gu:I9803667" as="element()*"/><xsl:param name="gu:I9757423" as="xsd:string"/><xsl:text>
</xsl:text><span><xsl:if test="exists($gu:I9803667[self::ndrbad])"><xsl:attribute name="style">color:red</xsl:attribute></xsl:if><xsl:for-each select="$gu:I9757423"><xsl:attribute name="title" select="normalize-space(.)"/></xsl:for-each><xsl:copy-of select="gu:I9276115(substring-before($gu:I9850351,' '))"/><xsl:value-of select="concat(substring($gu:I9850351,6),': ',count($gu:I9803667))"/></span><xsl:text>
</xsl:text></xsl:function><xsl:template name="gu:I9152981"><h3>Naming and Design Rules (NDR)</h3><p>
    As defined in <a target="_blank" href="http://docs.oasis-open.org/ubl/UBL-NDR/v3.0/UBL-NDR-v3.0.html">the UBL NDR v3.0 specification</a> and <a target="_blank" href="http://docs.oasis-open.org/ubl/Business-Document-NDR/v1.0/Business-Document-NDR-v1.0.html">the OASIS Business Document v1.0 specification</a>.
  </p><h4>Model-related NDRs</h4><pre><xsl:text>
</xsl:text><xsl:value-of select="concat($gu:I517143437,': ', count($gu:I47013039),' ABIEs', if( count($gu:I47013039)= count($gu:I36290767) ) then '' else concat( ' subset from a total of ', count($gu:I36290767) ) )"/><xsl:text>
</xsl:text><xsl:copy-of select="gu:O9234704 ('MOD01 - Document ABIE',$gu:O82742950, 'The apex of the information bundle shall be structured as a single top-level ABIE, referred to in this specification as a Document ABIE.' )"/><xsl:for-each select="$gu:O15099078"><xsl:sort select="@gu:I17987597"/><xsl:choose><xsl:when test="xsd:boolean(@gu:I9112659)"><xsl:copy-of select="gu:O9666232(.,concat('(',@gu:O28730190,')'))"/></xsl:when><xsl:otherwise><xsl:copy-of select="gu:O9666232(.,@gu:O28730190)"/></xsl:otherwise></xsl:choose></xsl:for-each><xsl:copy-of select="gu:O9234704( 'MOD02 - References to Document ABIEs', $gu:I14881825, 'There should be zero references to document ABIEs.' )"/><xsl:for-each select="$gu:I14881825"><xsl:copy-of select="gu:O9666232(.,@gu:I17987597)"/></xsl:for-each><xsl:copy-of select="gu:O9234704('MOD03 - Library ABIEs out of order', $gu:I14670735, 'The ABIEs in the common library shall be in alphabetical order. The ABIE reported is the one that occurrs before the prior ABIE. Subsequent ones might very well be in order, which would indicate that it is the prior ABIE that is actually the one out of order.' )"/><xsl:for-each select="$gu:I14670735"><xsl:copy-of select="gu:O9666232(.,@gu:I38306921)"/></xsl:for-each><xsl:copy-of select="gu:O9234704('MOD04 - Extension availability', (), 'Each document shall allow for optional augmentation with a collection of information not conceptually described by existing BIEs.' )"/><xsl:for-each select="$gu:I14365095"><xsl:value-of select="@message"/></xsl:for-each><xsl:text>
</xsl:text><xsl:copy-of select="gu:O9234704('COM01 - structured values', $gu:I14168313, 'The CCTS values in the model cannot be structured and must be made up of only string values. No empty values are allowed (the CCTS item should be absent from the mdoel if it has no value). The DEN and the column in error are indicated for each problem.' )"/><xsl:for-each select="$gu:I14168313"><xsl:copy-of select="gu:O9666232(.,concat(@gu:I17987597,': ',@gu:I9072691))"/></xsl:for-each><xsl:copy-of select="gu:O9234704('COM02 - prohibited characters', $gu:I13976849, 'The CCTS values in the model cannot have sensitive XML characters or sequences that might disturb down-stream processing of the information. Newline characters are allowed at the end of a value but not otherwise as there is no concept of a paragraph in a value.' )"/><xsl:for-each select="$gu:I13976849"><xsl:copy-of select="gu:O9666232(.,concat(@gu:I17987597,': ',@gu:I9072691,'=''',@gu:I21107895,''''))"/></xsl:for-each><xsl:copy-of select="$gu:I9033073,gu:I9317899('COM03')"/><xsl:text> - list of permitted abbreviations in name values: </xsl:text><xsl:choose><xsl:when test="not($gu:I13699163)"><xsl:text>(empty)</xsl:text></xsl:when><xsl:otherwise><xsl:for-each select="$gu:I13699163"><xsl:value-of select="$gu:I9033073,.,'=',.."/></xsl:for-each></xsl:otherwise></xsl:choose><xsl:copy-of select="gu:O9234704('COM03 - prohibited abbreviations in name values', $gu:I13520089, 'This analysis considers any word split after a sequence of digits, after two capitals that come before a capital followed by lowercase (e.g. UBLVersion-&gt;UBL Version), and between a lower-case followed by uppercase (e.g. VersionID-&gt;Version ID' )"/><xsl:for-each select="$gu:I13520089"><xsl:copy-of select="gu:O9666232(.,concat(@gu:I17987597,': ',@gu:I9072691,'=',@gu:I21107895, ' (',@gu:O21325502,')'))"/></xsl:for-each><xsl:copy-of select="$gu:I9033073,gu:I9317899('COM04')"/><xsl:text> - list of permitted abbreviations in DEN values: </xsl:text><xsl:choose><xsl:when test="not($gu:I13609037)"><xsl:text>(empty)</xsl:text></xsl:when><xsl:otherwise><xsl:for-each select="$gu:I13609037"><xsl:value-of select="$gu:I9033073,.,'=',.."/></xsl:for-each></xsl:otherwise></xsl:choose><xsl:copy-of select="gu:O9234704('COM04 - prohibited abbreviations in DEN values', $gu:I13345637, 'This analysis considers any word split after a sequence of digits, after two capitals that come before a capital followed by lowercase (e.g. UBLVersion-&gt;UBL Version), and between a lower-case followed by uppercase (e.g. VersionID-&gt;Version ID' )"/><xsl:for-each select="$gu:I13345637"><xsl:copy-of select="gu:O9666232(.,concat(@gu:I17987597,': ',@gu:I9072691,'=''',@gu:I21107895, ''' (',@gu:O21325502,')'))"/></xsl:for-each><xsl:copy-of select="$gu:I9033073,gu:I9317899('COM05')"/><xsl:text> - list of equivalences of primary nouns to representation terms
        in names when testing for duplication: </xsl:text><xsl:choose><xsl:when test="not($gu:O20894684)"><xsl:text>(empty)</xsl:text></xsl:when><xsl:otherwise><xsl:for-each select="$gu:O20894684"><xsl:value-of select="$gu:I9033073,primary-noun,'=',representation-term"/></xsl:for-each></xsl:otherwise></xsl:choose><xsl:text>
</xsl:text><xsl:copy-of select="gu:O9234704('COM06 - invalid component type', $gu:O13175628, 'The component type can only be ABIE, BBIE or ASBIE.' )"/><xsl:for-each select="$gu:O13175628"><xsl:copy-of select="gu:O9666232(.,concat(@gu:I17987597,': ',@gu:I9402607))"/></xsl:for-each><xsl:copy-of select="gu:O9234704('COM07 - invalid ABIE values', $gu:O13092238, 'ABIE values are constrained by the specification.' )"/><xsl:for-each select="$gu:O13092238"><xsl:copy-of select="gu:O9666232(.,concat(@gu:I17987597,': ',@gu:I9072691,'=',@gu:I21107895,@gu:O137904916, if(@gu:O9445542) then concat(' (expected: ',@gu:O9445542,')') else ''))"/></xsl:for-each><xsl:copy-of select="gu:O9234704('COM08 - invalid BBIE values', $gu:O12536810, 'BBIE values are constrained by the specification.' )"/><xsl:for-each select="$gu:O12536810"><xsl:copy-of select="gu:O9666232(.,concat(@gu:I17987597,': ',@gu:I9072691,'=',@gu:I21107895,@gu:O137904916, if(@gu:O9445542) then concat(' (expected: ',@gu:O9445542,')') else ''))"/></xsl:for-each><xsl:copy-of select="gu:O9234704('COM09 - invalid ASBIE values', $gu:I11820421, 'ASBIE values are constrained by the specification.' )"/><xsl:for-each select="$gu:I11820421"><xsl:copy-of select="gu:O9666232(.,concat(@gu:I17987597,': ',@gu:I9072691,'=',@gu:I21107895,@gu:O137904916, if(@gu:O9445542) then concat(' (expected: ',@gu:O9445542,')') else ''))"/></xsl:for-each><xsl:copy-of select="gu:O9234704('COM10 - DEN uniqueness', $gu:O11492076, 'No two BIEs can have the same DEN' )"/><xsl:for-each select="$gu:O11492076"><xsl:copy-of select="gu:O9666232(.,concat(@gu:I17987597,': ',@gu:O413714750))"/></xsl:for-each><xsl:copy-of select="gu:O9234704( 'COM11 - prohibited character in name values', $gu:I11365789, 'Words in name values cannot have characters that interfere with the syntax for dictionary entry names.' )"/><xsl:for-each select="$gu:I11365789"><xsl:copy-of select="gu:O9666232(.,concat(@gu:I17987597,': ',@gu:I9072691,'=''',@gu:I21107895,''''))"/></xsl:for-each><xsl:copy-of select="gu:O9234704('COM12 - leading upper case in DEN name values', $gu:O11242248, 'Words in name values must have leading upper-case and the remainder lower-case unless the word is an approved abbreviation.' )"/><xsl:for-each select="$gu:O11242248"><xsl:copy-of select="gu:O9666232(.,concat(@gu:I17987597,': ',@gu:I9072691,'=',@gu:I21107895))"/></xsl:for-each><xsl:copy-of select="gu:O9234704('COM13 - ABIE empty', $gu:O11121364, 'An ABIE cannot be empty.' )"/><xsl:for-each select="$gu:O11121364"><xsl:copy-of select="gu:O9666232(.,concat( @gu:I38306921,' (', @gu:O8993798,')'))"/></xsl:for-each><xsl:copy-of select="gu:O9234704('COM14 - ABIE order', $gu:O10887230, 'All BBIEs for an ABIE must be before all ASBIEs.' )"/><xsl:for-each select="$gu:O10887230"><xsl:copy-of select="gu:O9666232(.,concat(@gu:O48106366,': ', if( @gu:O8954864 ) then @gu:O8954864 else '(position)') )"/></xsl:for-each></pre></xsl:template><xsl:param name="xsd-maindoc-dir-uri" as="xsd:string?"/><xsl:param name="xsd-common-dir-uri" as="xsd:string?"/><xsl:variable name="gu:O8916266" as="xsd:boolean" select="exists($xsd-maindoc-dir-uri) and exists($xsd-common-dir-uri) and false()"/><xsl:variable name="gu:O8877998" as="document-node()*" select="if( empty( $xsd-maindoc-dir-uri) ) then () else collection(concat(resolve-uri($xsd-maindoc-dir-uri,base-uri(/)), '/?select=*.xsd;on-error=ignore'))"/><xsl:variable name="gu:O8840058" as="element(xsd:element)*" select="$gu:O8877998/xsd:schema/xsd:element"/><xsl:variable name="gu:I8802441" as="element(xsd:complexType)*" select="$gu:O8877998/xsd:schema/xsd:complexType [@name=../xsd:element/@type]"/><xsl:variable name="gu:I8765143" as="document-node()*" select="if( empty( $xsd-common-dir-uri) ) then () else collection(concat(resolve-uri($xsd-common-dir-uri,base-uri(/)), '/?select=*.xsd;on-error=ignore'))"/><xsl:variable name="gu:I8728159" as="element(xsd:element)*" select="$gu:I8765143/xsd:schema/xsd:element"/><xsl:variable name="gu:O8691486" as="element(xsd:complexType)*" select="$gu:I8765143/xsd:schema/xsd:complexType [@name=../xsd:element/@type]"/><xsl:variable name="gu:O8655120" as="element()*"><xsl:for-each select="$gu:O8840058"><xsl:sequence select="."/></xsl:for-each></xsl:variable><xsl:variable name="gu:I8619057" as="element(ndrbad)*"><xsl:for-each select="$gu:O86190572"><xsl:variable name="gu:I8583293" select="gu:I344762291(.,$gu:I689524583)"/><xsl:variable name="gu:I8547825" select="$gu:O8840058[@name=$gu:I8583293]"/><xsl:variable name="gu:I8512649" select="count($gu:I8547825)"/><xsl:choose><xsl:when test="$gu:I8512649 &gt; 1"><ndrbad gu:I13009897="{$gu:I8583293}" gu:O8176180="{$gu:I8512649}" gu:I17987597="{gu:I344762291(.,'DictionaryEntryName')}" gu:I8143991="{string-join($gu:I8547825/                               replace(document-uri(root(.)),'.*/',''),', ')}"/></xsl:when><xsl:when test="$gu:I8512649 = 0"><ndrbad gu:I13009897="{$gu:I8583293}" gu:I8208625="" gu:I17987597="{gu:I344762291(.,'DictionaryEntryName')}"/></xsl:when></xsl:choose></xsl:for-each></xsl:variable><xsl:variable name="gu:I8477761" as="element(ndrbad)*"><xsl:for-each select="$gu:O86190572"><xsl:variable name="gu:I8583293" select="gu:I344762291(.,$gu:I689524583)"/><xsl:variable name="gu:O8443158" select="gu:I344762291(.,'DictionaryEntryName')"/><xsl:variable name="gu:I8547825" select="$gu:O8840058[@name=$gu:I8583293]"/><xsl:for-each-group select="$gu:I8547825" group-by="generate-id(root(.))"><xsl:for-each select="current-group()"><xsl:variable name="gu:O8408836" select="root(.)//xsd:element[@name]"/><xsl:if test="count($gu:O8408836) &gt; 1"><ndrbad gu:I13009897="{$gu:I8583293}" gu:I17987597="{$gu:O8443158}" gu:I689524583="{string-join($gu:O8408836/@name,', ')}"/></xsl:if></xsl:for-each></xsl:for-each-group></xsl:for-each></xsl:variable><xsl:variable name="gu:O8374792" as="element(ndrbad)*"><xsl:for-each select="$gu:O86190572"><xsl:variable name="gu:I8583293" select="gu:I344762291(.,$gu:I689524583)"/><xsl:variable name="gu:O8443158" select="gu:I344762291(.,'DictionaryEntryName')"/><xsl:variable name="gu:I8547825" select="$gu:O8840058[@name=$gu:I8583293]"/><xsl:for-each-group select="$gu:I8547825" group-by="generate-id(root(.))"><xsl:for-each select="current-group()"><xsl:variable name="gu:O8408836" select="root(.)//xsd:element"/><xsl:variable name="gu:I8341023" select="root(.)//xsd:complexType[@name]"/><xsl:if test="count($gu:I8341023) &gt; 1"><ndrbad gu:I13009897="{$gu:I8583293}" gu:I17987597="{$gu:O8443158}" gu:I689524583="{string-join($gu:I8341023/@name,', ')}"/></xsl:if><xsl:if test="not($gu:O8408836/@type = $gu:I8341023/@name)"><ndrbad gu:I13009897="{$gu:I8583293}" gu:I17987597="{$gu:O8443158}" gu:I9402607="{$gu:O8408836/@type}" gu:I8112053="{$gu:I8341023/@name}"/></xsl:if></xsl:for-each></xsl:for-each-group></xsl:for-each></xsl:variable><xsl:variable name="gu:I8307525" as="element(ndrbad)*"><xsl:for-each select="$gu:O86190572"><xsl:variable name="gu:I8583293" select="gu:I344762291(.,$gu:I689524583)"/><xsl:variable name="gu:O8443158" select="gu:I344762291(.,'DictionaryEntryName')"/><xsl:variable name="gu:I8547825" select="$gu:O8840058[@name=$gu:I8583293]"/><xsl:for-each-group select="$gu:I8547825" group-by="generate-id(root(.))"><xsl:for-each select="current-group()"><xsl:variable name="gu:O8408836" select="root(.)//xsd:element"/><xsl:variable name="gu:I8341023" select="root(.)//xsd:complexType[@name]"/><xsl:if test="count($gu:I8341023) &gt; 1"><ndrbad gu:I13009897="{$gu:I8583293}" gu:I17987597="{$gu:O8443158}" gu:I689524583="{string-join($gu:I8341023/@name,', ')}"/></xsl:if><xsl:variable name="gu:I8274295" select="()"/><xsl:if test="count($gu:I8274295) &gt; 1"><ndrbad gu:I13009897="{$gu:I8583293}" gu:I17987597="{$gu:O8443158}" gu:count="{count($gu:I8274295)}" gu:I8112053="{string-join($gu:I8274295,', ')}"/></xsl:if></xsl:for-each></xsl:for-each-group></xsl:for-each></xsl:variable><xsl:template name="gu:I8241329"><h4>Schema-related NDRs</h4><pre><xsl:copy-of select="gu:O9234704( 'FRG01 - Document ABIE schema fragment errors', $gu:I8619057, 'There shall be one schema fragment created for each Document ABIE.' )"/><xsl:for-each select="$gu:I8619057"><xsl:copy-of select="gu:O9666232(.,concat(@gu:I13009897,': ',if(@gu:I8208625) then 'missing' else concat( 'found ',@gu:O8176180,' (',@gu:I8143991,')') ) )"/></xsl:for-each><xsl:copy-of select="gu:O9234704( 'FRG02 - Document ABIE schema declaration errors', $gu:I8477761, 'Each Document ABIE schema fragment shall include a single element declaration, that being for the Document ABIE.' )"/><xsl:for-each select="$gu:I8477761"><xsl:copy-of select="gu:O9666232(.,concat(@gu:I13009897,': ',@gu:I689524583 ) )"/></xsl:for-each><xsl:copy-of select="gu:O9234704( 'FRG03 - Document ABIE type declaration errors', $gu:O8374792, 'Each Document ABIE schema fragment shall include a single type declaration, that being for the content of the Document ABIE.' )"/><xsl:for-each select="$gu:O8374792"><xsl:copy-of select="gu:O9666232(.,concat(@gu:I13009897,': ', if( @gu:I689524583 ) then concat( 'too many (',@gu:I689524583,')' ) else concat( 'mismatch (',@gu:I9402607,' ',@gu:I8112053,')' )) )"/></xsl:for-each><xsl:copy-of select="gu:O9234704( 'FRG04 - Library ABIE schema fragment', $gu:I8307525, 'There shall be one common schema fragment created to contain all ASBIEs (that is, from every Document ABIE and every Library ABIE) and all Library ABIEs.' )"/><xsl:for-each select="$gu:O8374792"><xsl:copy-of select="gu:O9666232(.,concat(@gu:I13009897,': ', if( @gu:I689524583 ) then concat( 'too many (',@gu:I689524583,')' ) else concat( 'mismatch (',@gu:I9402607,' ',@gu:I8112053,')' )) )"/></xsl:for-each></pre></xsl:template><xsl:output indent="yes"/><xsl:param name="old" as="document-node()" select="if( $old-uri) then doc(resolve-uri($old-uri,base-uri($new))) else if( $new ) then $new else error( (), 'Missing URI or open old document')"/><xsl:param name="old-uri" as="xsd:string?"/><xsl:param name="new" as="document-node()" select="/"/><xsl:param name="base" as="document-node()?" select="if( $base-uri) then doc(resolve-uri($base-uri,base-uri($new))) else ()"/><xsl:param name="title-suffix" as="xsd:string" required="yes"/><xsl:param name="change-suffix" as="xsd:string" select="''"/><xsl:param name="ignore-sort-rule" as="xsd:string" select="'no'"/><xsl:variable name="gu:O14567420" as="xsd:boolean" select="starts-with('yes',lower-case($ignore-sort-rule))"/><xsl:param name="docbook-common-uri" as="xsd:string?"/><xsl:param name="docbook-maindoc-uri" as="xsd:string?"/><xsl:template match="/"><xsl:if test="not($config)"><xsl:message terminate="yes"><xsl:text>Either +config= or config-uri= is required</xsl:text><xsl:text> as a parameter pointing to the configuration file.</xsl:text></xsl:message></xsl:if><xsl:if test="exists($xsd-common-dir-uri)!=exists($xsd-maindoc-dir-uri)"><xsl:message terminate="yes"><xsl:text>When checking the validation artefacts both of the </xsl:text><xsl:text>XSD directory arguments must be specified.</xsl:text></xsl:message></xsl:if><xsl:variable name="gu:O8080366"><xsl:call-template name="gu:I8048925"><xsl:with-param name="common" select="true()"/></xsl:call-template></xsl:variable><xsl:variable name="gu:I8017727"><xsl:call-template name="gu:I8048925"><xsl:with-param name="common" select="false()"/></xsl:call-template></xsl:variable><xsl:variable name="gu:I7986771" select="$gu:O7956052[self::ndrbad]"/><xsl:result-document method="html"><html><head><title>Analysis of <xsl:value-of select="$title-suffix"/></title></head><body><div style="text-align:right;margin-bottom:0pt"><small><xsl:value-of select="current-dateTime()"/></small></div><xsl:if test="$gu:I7986771"><h2>Errors detected</h2><p>The following DENs need attention<xsl:text/><xsl:if test="($gu:O8080366,$gu:I8017727) [.//tbody/row]">
              (<a href="#_analysis">complete analysis here</a>)</xsl:if><xsl:text/>:</p><ul><xsl:for-each-group select="$gu:I7986771" group-by=".//@gu:I17987597"><xsl:sort select="current-grouping-key()"/><li><xsl:value-of select="@gu:I17987597"/><xsl:text> - </xsl:text><xsl:copy-of select="gu:I7925569(current-group())"/></li></xsl:for-each-group></ul></xsl:if><h2><a name="_analysis"/>Analysis of <xsl:value-of select="$title-suffix"/></h2><p>
         Hover over the category titles for a more detailed description
         in a pop-up tool-tip.
       </p><xsl:call-template name="gu:I9152981"/><xsl:if test="$gu:O8916266"><xsl:call-template name="gu:I8241329"/></xsl:if><xsl:call-template name="gu:I9621273"/><xsl:apply-templates select="$gu:O8080366[.//tbody/row], $gu:I8017727[.//tbody/row]" mode="gu:I7895319"/></body></html></xsl:result-document><xsl:if test="$docbook-common-uri and $gu:O8080366[.//tbody/row]"><xsl:result-document href="{$docbook-common-uri}"><xsl:copy-of select="$gu:O8080366"/></xsl:result-document></xsl:if><xsl:if test="$docbook-maindoc-uri and $gu:I8017727[.//tbody/row]"><xsl:result-document href="{$docbook-maindoc-uri}"><xsl:copy-of select="$gu:I8017727"/></xsl:result-document></xsl:if><xsl:if test="$gu:I7986771"><xsl:message terminate="yes" select="count($gu:I7986771),'NDR check errors detected'"/></xsl:if></xsl:template><xsl:function name="gu:I7925569" as="node()*"><xsl:param name="group" as="element()*"/><xsl:for-each select="$group"><xsl:if test="position()&gt;1">, </xsl:if><xsl:text>(</xsl:text><a href="#{generate-id(.)}"><xsl:if test="false() and @gu:I7865299"><xsl:attribute name="title" select="@gu:I7865299"/></xsl:if><xsl:value-of select="position()"/></a><xsl:text>)</xsl:text></xsl:for-each></xsl:function><xsl:template name="gu:I8048925"><xsl:param name="common" as="xsd:boolean"/><table><title><xsl:text>Changes to </xsl:text><xsl:value-of select="if( $common ) then 'Library' else 'Document'"/><xsl:text> Elements </xsl:text><xsl:value-of select="$title-suffix"/></title><tgroup cols="3"><xsl:comment select="if( $common ) then 'Library' else 'Document', $title-suffix"/><xsl:text>
</xsl:text><colspec colwidth="35*"/><colspec colwidth="35*"/><colspec colwidth="30*"/><thead><row><entry>Aggregate BIE</entry><entry>Basic or Association BIE</entry><entry>Changes for <xsl:value-of select="$change-suffix"/></entry></row></thead><tbody><xsl:call-template name="gu:O7835506"><xsl:with-param name="abies" select="if( $common ) then $gu:I47013039 else $gu:O86190572"/></xsl:call-template></tbody></tgroup></table></xsl:template><xsl:template name="gu:O7835506"><xsl:param name="abies" as="element(Row)*"/><xsl:for-each select="$abies"><xsl:sort select="gu:I344762291(.,$gu:I689524583)"/><xsl:variable name="gu:O7805938" select="gu:I344762291(.,$gu:I689524583)"/><xsl:variable name="gu:I7776593" select="concat( gu:I344762291(.,'ObjectClass'),' ', $gu:O7805938,' ', gu:I344762291(.,'ComponentType'))"/><xsl:choose><xsl:when test="not(key('gu:I23242401',$gu:I7776593,$old))"><xsl:call-template name="gu:I29979329"><xsl:with-param name="col1" select="$gu:O7805938"/><xsl:with-param name="col3">Added</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:variable name="gu:I7747467" select="key('gu:I41371475', gu:I344762291(.,'ObjectClass'), $old)"/><xsl:variable name="gu:O7718558" select="key('gu:I41371475', gu:I344762291(.,'ObjectClass'), $new)"/><xsl:variable name="gu:I7689865" as="element()*"><xsl:for-each select="$gu:O7718558"><xsl:variable name="gu:O7661384" select="."/><xsl:variable name="gu:I7633113" select="$gu:I7747467[gu:I344762291(.,$gu:I689524583)= current()/gu:I344762291(.,$gu:I689524583)]"/><xsl:choose><xsl:when test="not($gu:I7633113)"><xsl:call-template name="gu:I29979329"><xsl:with-param name="col2" select="$gu:O7661384/gu:I344762291(.,$gu:I689524583)"/><xsl:with-param name="col3">Added</xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:if test="$gu:O7661384/gu:I344762291(.,'Cardinality')!= $gu:I7633113/gu:I344762291(.,'Cardinality')"><xsl:call-template name="gu:I29979329"><xsl:with-param name="col2" select="$gu:O7661384/gu:I344762291(.,$gu:I689524583)"/><xsl:with-param name="col3"><xsl:text>Changed cardinality from </xsl:text><xsl:value-of select="$gu:I7633113/gu:I344762291(.,'Cardinality')"/><xsl:text> to </xsl:text><xsl:value-of select="$gu:O7661384/gu:I344762291(.,'Cardinality')"/></xsl:with-param></xsl:call-template></xsl:if><xsl:if test="$gu:O7661384/gu:I344762291(.,'DictionaryEntryName')!= $gu:I7633113/gu:I344762291(.,'DictionaryEntryName')"><xsl:call-template name="gu:I29979329"><xsl:with-param name="col2" select="$gu:O7661384/gu:I344762291(.,$gu:I689524583)"/><xsl:with-param name="col3"><xsl:text>Changed dictionary entry name from “</xsl:text><xsl:value-of select="$gu:I7633113/gu:I344762291(.,'DictionaryEntryName')"/><xsl:text>” to “</xsl:text><xsl:value-of select="$gu:O7661384/gu:I344762291(.,'DictionaryEntryName')"/><xsl:text>”</xsl:text></xsl:with-param></xsl:call-template></xsl:if></xsl:otherwise></xsl:choose></xsl:for-each></xsl:variable><xsl:if test="$gu:I7689865"><xsl:call-template name="gu:I29979329"><xsl:with-param name="col1" select="$gu:O7805938"/></xsl:call-template><xsl:copy-of select="$gu:I7689865"/></xsl:if></xsl:otherwise></xsl:choose></xsl:for-each></xsl:template><xsl:template name="gu:I29979329"><xsl:param name="col1" select="' '" as="xsd:string?"/><xsl:param name="col2" select="' '" as="xsd:string?"/><xsl:param name="col3" select="' '" as="xsd:string?"/><row><xsl:if test="$col1!=' '"><xsl:processing-instruction name="dbhtml">bgcolor="#DDDDDD"</xsl:processing-instruction><xsl:processing-instruction name="dbfo">bgcolor="#DDDDDD"</xsl:processing-instruction></xsl:if><entry><xsl:value-of select="normalize-space($col1)"/></entry><entry><xsl:value-of select="normalize-space($col2)"/></entry><entry><xsl:value-of select="normalize-space($col3)"/></entry></row></xsl:template><xsl:variable name="gu:O7605050" as="element()+"><xlate from="table"/><xlate from="title" to="h2"/><xlate from="tgroup" to="table"><attrs style="border:1px solid black"/></xlate><xlate from="thead"/><xlate from="tbody"/><xlate from="colspec"/><xlate from="row" to="tr"/><xlate from="entry" grandparent="thead" to="th"><attrs style="border:1px solid black"/></xlate><xlate from="entry" grandparent="tbody" to="td"><attrs style="border:1px solid black"/></xlate></xsl:variable><xsl:template match="*" mode="gu:I7895319"><xsl:variable name="gu:O10190018" select="$gu:O7605050[name(current())=@from] [not(@grandparent) or name(current()/parent::*/parent::*)=@grandparent]"/><xsl:choose><xsl:when test="not($gu:O10190018)"><xsl:message select="'Not handled:',name(.)"/></xsl:when><xsl:when test="not($gu:O10190018/@to)"><xsl:apply-templates mode="gu:I7895319"/></xsl:when><xsl:otherwise><xsl:element name="{$gu:O10190018/@to}"><xsl:copy-of select="$gu:O10190018/attrs/@*"/><xsl:for-each select="processing-instruction()[contains(.,'bgcolor')]"><xsl:attribute name="style" select="concat('background-color:',replace(.,'.*&#34;(.+)&#34;.*','$1'))"/></xsl:for-each><xsl:apply-templates mode="gu:I7895319"/></xsl:element></xsl:otherwise></xsl:choose></xsl:template><xsl:variable name="gu:I9033073" as="xsd:string"><xsl:text>
</xsl:text></xsl:variable><xsl:variable name="gu:O7956052" as="element()*" select="$gu:O20083240, $gu:O19153460, $gu:O18469408, $gu:I18145383, $gu:O16955522, $gu:I15790639, $gu:O15099078, $gu:I14881825, if( $gu:O14567420 ) then () else $gu:I14670735, $gu:I14168313, $gu:I13976849, $gu:I13520089, $gu:I13345637, $gu:O13175628, $gu:O13092238, $gu:O12536810, $gu:I11820421, $gu:O11492076, $gu:I11365789, $gu:O11242248, $gu:O11121364, $gu:O10887230, if( not($gu:O8916266) ) then () else ( $gu:I8619057, $gu:I8477761, $gu:O8374792, $gu:I8307525 )"/></xsl:stylesheet>